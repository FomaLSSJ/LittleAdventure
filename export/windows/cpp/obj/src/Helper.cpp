// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_GUI
#include <GUI.h>
#endif
#ifndef INCLUDED_Helper
#include <Helper.h>
#endif
#ifndef INCLUDED_Inventory
#include <Inventory.h>
#endif
#ifndef INCLUDED_Item
#include <Item.h>
#endif
#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a675896b95e8dc0_7_new,"Helper","new",0xc5517180,"Helper.new","Helper.hx",7,0xaac93df0)
HX_LOCAL_STACK_FRAME(_hx_pos_0a675896b95e8dc0_12_calc,"Helper","calc",0xdaa97375,"Helper.calc","Helper.hx",12,0xaac93df0)
HX_LOCAL_STACK_FRAME(_hx_pos_0a675896b95e8dc0_17_addItem,"Helper","addItem",0xf9b1b8f4,"Helper.addItem","Helper.hx",17,0xaac93df0)
HX_LOCAL_STACK_FRAME(_hx_pos_0a675896b95e8dc0_21_endDialog,"Helper","endDialog",0x44308c23,"Helper.endDialog","Helper.hx",21,0xaac93df0)

void Helper_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0a675896b95e8dc0_7_new)
HXDLIN(   7)		::haxe::Log_obj::trace(HX_("Helper created",56,29,5d,68),hx::SourceInfo(HX_("Helper.hx",f0,3d,c9,aa),7,HX_("Helper",8e,f1,e2,38),HX_("new",60,d0,53,00)));
            	}

Dynamic Helper_obj::__CreateEmpty() { return new Helper_obj; }

void *Helper_obj::_hx_vtable = 0;

Dynamic Helper_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Helper_obj > _hx_result = new Helper_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Helper_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x38e2f18e;
}

void Helper_obj::calc( ::Dynamic __o_f, ::Dynamic __o_s){
 ::Dynamic f = __o_f.Default(1);
 ::Dynamic s = __o_s.Default(1);
            	HX_STACKFRAME(&_hx_pos_0a675896b95e8dc0_12_calc)
HXDLIN(  12)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  12)		_hx_tmp((f + s),hx::SourceInfo(HX_("Helper.hx",f0,3d,c9,aa),12,HX_("Helper",8e,f1,e2,38),HX_("calc",95,18,ba,41)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Helper_obj,calc,(void))

void Helper_obj::addItem(::String name){
            	HX_STACKFRAME(&_hx_pos_0a675896b95e8dc0_17_addItem)
HXDLIN(  17)		 ::Inventory _hx_tmp = ::Reg_obj::inv;
HXDLIN(  17)		_hx_tmp->addItem(::Reg_obj::itemsList->get(name).StaticCast<  ::Item >(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Helper_obj,addItem,(void))

void Helper_obj::endDialog(){
            	HX_STACKFRAME(&_hx_pos_0a675896b95e8dc0_21_endDialog)
HXLINE(  22)		::Reg_obj::gui->toggleDialog();
HXLINE(  23)		::Reg_obj::triggers->set(HX_("is_dialog",bd,6b,57,56),false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Helper_obj,endDialog,(void))


hx::ObjectPtr< Helper_obj > Helper_obj::__new() {
	hx::ObjectPtr< Helper_obj > __this = new Helper_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Helper_obj > Helper_obj::__alloc(hx::Ctx *_hx_ctx) {
	Helper_obj *__this = (Helper_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Helper_obj), false, "Helper"));
	*(void **)__this = Helper_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Helper_obj::Helper_obj()
{
}

hx::Val Helper_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"calc") ) { return hx::Val( calc_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addItem") ) { return hx::Val( addItem_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"endDialog") ) { return hx::Val( endDialog_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Helper_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Helper_obj_sStaticStorageInfo = 0;
#endif

static ::String Helper_obj_sMemberFields[] = {
	HX_HCSTRING("calc","\x95","\x18","\xba","\x41"),
	HX_HCSTRING("addItem","\xd4","\x07","\xfd","\x81"),
	HX_HCSTRING("endDialog","\x03","\x53","\x15","\xf1"),
	::String(null()) };

static void Helper_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Helper_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Helper_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Helper_obj::__mClass,"__mClass");
};

#endif

hx::Class Helper_obj::__mClass;

void Helper_obj::__register()
{
	hx::Object *dummy = new Helper_obj;
	Helper_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Helper","\x8e","\xf1","\xe2","\x38");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Helper_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Helper_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Helper_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Helper_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Helper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Helper_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

