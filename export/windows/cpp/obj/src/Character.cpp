// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_GUI
#include <GUI.h>
#endif
#ifndef INCLUDED_Helper
#include <Helper.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ae240c01d039da8e_7_new,"Character","new",0x74bf54fb,"Character.new","Character.hx",7,0xf073a2d5)
static const int _hx_array_data_e3a4bb89_1[] = {
	(int)0,
};
static const int _hx_array_data_e3a4bb89_2[] = {
	(int)3,
};
static const int _hx_array_data_e3a4bb89_3[] = {
	(int)6,
};
static const int _hx_array_data_e3a4bb89_4[] = {
	(int)9,
};
static const int _hx_array_data_e3a4bb89_5[] = {
	(int)1,(int)2,
};
static const int _hx_array_data_e3a4bb89_6[] = {
	(int)4,(int)5,
};
static const int _hx_array_data_e3a4bb89_7[] = {
	(int)7,(int)8,
};
static const int _hx_array_data_e3a4bb89_8[] = {
	(int)10,(int)11,
};
HX_LOCAL_STACK_FRAME(_hx_pos_ae240c01d039da8e_48_update,"Character","update",0x0e18944e,"Character.update","Character.hx",48,0xf073a2d5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae240c01d039da8e_52_execute,"Character","execute",0x75a67850,"Character.execute","Character.hx",52,0xf073a2d5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae240c01d039da8e_62_setLook,"Character","setLook",0xb6d5553c,"Character.setLook","Character.hx",62,0xf073a2d5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae240c01d039da8e_80_getDirection,"Character","getDirection",0x18b18ece,"Character.getDirection","Character.hx",80,0xf073a2d5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae240c01d039da8e_84_startDialog,"Character","startDialog",0xb2d37a65,"Character.startDialog","Character.hx",84,0xf073a2d5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae240c01d039da8e_8_boot,"Character","boot",0xaac40737,"Character.boot","Character.hx",8,0xf073a2d5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae240c01d039da8e_9_boot,"Character","boot",0xaac40737,"Character.boot","Character.hx",9,0xf073a2d5)
HX_LOCAL_STACK_FRAME(_hx_pos_ae240c01d039da8e_10_boot,"Character","boot",0xaac40737,"Character.boot","Character.hx",10,0xf073a2d5)

void Character_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_ae240c01d039da8e_7_new)
HXLINE(  15)		this->dialog = ::Array_obj< ::Dynamic>::__new();
HXLINE(  14)		this->dialogIndex = (int)0;
HXLINE(  13)		this->name = HX_("__NAME__",4b,61,2b,78);
HXLINE(  12)		this->id = HX_("None",d8,3e,e3,33);
HXLINE(  19)		super::__construct(X,Y,null());
HXLINE(  21)		this->set_immovable(true);
HXLINE(  22)		this->set_facing((int)256);
HXLINE(  24)		if (( (bool)(SimpleGraphic) )) {
HXLINE(  26)			this->loadGraphic(SimpleGraphic,true,(int)16,(int)16,null(),null());
HXLINE(  28)			this->animation->add(HX_("DOWN_IDLE",51,27,d8,e3),::Array_obj< int >::fromData( _hx_array_data_e3a4bb89_1,1),null(),null(),null(),null());
HXLINE(  29)			this->animation->add(HX_("UP_IDLE",b8,d6,b2,ae),::Array_obj< int >::fromData( _hx_array_data_e3a4bb89_2,1),null(),null(),null(),null());
HXLINE(  30)			this->animation->add(HX_("LEFT_IDLE",8c,41,a2,e2),::Array_obj< int >::fromData( _hx_array_data_e3a4bb89_3,1),null(),null(),null(),null());
HXLINE(  31)			this->animation->add(HX_("RIGHT_IDLE",b7,3d,38,c7),::Array_obj< int >::fromData( _hx_array_data_e3a4bb89_4,1),null(),null(),null(),null());
HXLINE(  33)			this->animation->add(HX_("DOWN_WALK",46,dd,16,ed),::Array_obj< int >::fromData( _hx_array_data_e3a4bb89_5,2),(int)2,null(),null(),null());
HXLINE(  34)			this->animation->add(HX_("UP_WALK",ad,8c,f1,b7),::Array_obj< int >::fromData( _hx_array_data_e3a4bb89_6,2),(int)2,null(),null(),null());
HXLINE(  35)			this->animation->add(HX_("LEFT_WALK",81,f7,e0,eb),::Array_obj< int >::fromData( _hx_array_data_e3a4bb89_7,2),(int)2,null(),null(),null());
HXLINE(  36)			this->animation->add(HX_("RIGHT_WALK",ac,f3,76,d0),::Array_obj< int >::fromData( _hx_array_data_e3a4bb89_8,2),(int)2,null(),null(),null());
HXLINE(  38)			this->animation->play(HX_("DOWN_WALK",46,dd,16,ed),null(),null(),null());
            		}
            		else {
HXLINE(  42)			this->makeGraphic((int)16,(int)16,(int)-16776961,null(),null());
            		}
            	}

Dynamic Character_obj::__CreateEmpty() { return new Character_obj; }

void *Character_obj::_hx_vtable = 0;

Dynamic Character_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Character_obj > _hx_result = new Character_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Character_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b6ffd77) {
		if (inClassId<=(int)0x00bb8ea5) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x00bb8ea5;
		} else {
			return inClassId==(int)0x0b6ffd77;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void Character_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_ae240c01d039da8e_48_update)
HXDLIN(  48)		this->super::update(elapsed);
            	}


void Character_obj::execute( ::Dynamic executor){
            	HX_STACKFRAME(&_hx_pos_ae240c01d039da8e_52_execute)
HXLINE(  53)		this->setLook(( (int)(executor->__Field(HX_("getDirection",c9,fe,96,1f),hx::paccDynamic)()) ));
HXLINE(  55)		if ((::Type_obj::getClassName(::Type_obj::getClass(executor)) == HX_("Player",81,5f,4d,6c))) {
HXLINE(  57)			::haxe::Log_obj::trace(HX_("Player executed script",dd,d6,02,01),hx::SourceInfo(HX_("Character.hx",d5,a2,73,f0),57,HX_("Character",89,bb,a4,e3),HX_("execute",35,0a,0d,cc)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Character_obj,execute,(void))

void Character_obj::setLook(int Direction){
            	HX_STACKFRAME(&_hx_pos_ae240c01d039da8e_62_setLook)
HXLINE(  63)		this->set_facing(Direction);
HXLINE(  65)		switch((int)(Direction)){
            			case (int)1: {
HXLINE(  74)				this->animation->play(HX_("RIGHT_WALK",ac,f3,76,d0),null(),null(),null());
            			}
            			break;
            			case (int)16: {
HXLINE(  72)				this->animation->play(HX_("LEFT_WALK",81,f7,e0,eb),null(),null(),null());
            			}
            			break;
            			case (int)256: {
HXLINE(  68)				this->animation->play(HX_("DOWN_WALK",46,dd,16,ed),null(),null(),null());
            			}
            			break;
            			case (int)4096: {
HXLINE(  70)				this->animation->play(HX_("UP_WALK",ad,8c,f1,b7),null(),null(),null());
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Character_obj,setLook,(void))

int Character_obj::getDirection(){
            	HX_STACKFRAME(&_hx_pos_ae240c01d039da8e_80_getDirection)
HXDLIN(  80)		return this->facing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Character_obj,getDirection,return )

void Character_obj::startDialog(){
            	HX_STACKFRAME(&_hx_pos_ae240c01d039da8e_84_startDialog)
HXLINE(  85)		if (!(::Reg_obj::gui->isActive())) {
HXLINE(  87)			::Reg_obj::gui->toggleDialog();
            		}
HXLINE(  90)		if ((this->dialogIndex >= this->dialog->length)) {
HXLINE(  92)			::Reg_obj::gui->toggleDialog();
HXLINE(  94)			this->dialogIndex = (int)0;
            		}
            		else {
HXLINE(  98)			 ::haxe::ds::StringMap stack = this->dialog->__get(this->dialogIndex).StaticCast<  ::haxe::ds::StringMap >();
HXLINE( 100)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 100)			_hx_tmp((HX_("Index:",08,89,87,c8) + this->dialogIndex),hx::SourceInfo(HX_("Character.hx",d5,a2,73,f0),100,HX_("Character",89,bb,a4,e3),HX_("startDialog",ca,62,19,29)));
HXLINE( 102)			{
HXLINE( 102)				 ::Dynamic _g = stack->get(HX_("key",9f,89,51,00));
HXDLIN( 102)				if (hx::IsNotNull( _g )) {
HXLINE( 102)					::String _hx_switch_0 = ( (::String)(_g) );
            					if (  (_hx_switch_0==HX_("function",18,ab,52,14)) ){
HXLINE( 108)						 ::Dynamic data = stack->get(HX_("data",2a,56,63,42));
HXLINE( 110)						 ::Helper _hx_tmp1 = ::Reg_obj::helper;
HXDLIN( 110)						 ::Dynamic _hx_tmp2 = ::Reflect_obj::field(::Reg_obj::helper,( (::String)(data->__Field(HX_("field",ba,94,93,00),hx::paccDynamic)) ));
HXDLIN( 110)						::Reflect_obj::callMethod(_hx_tmp1,_hx_tmp2,( (::cpp::VirtualArray)(data->__Field(HX_("args",5d,8d,74,40),hx::paccDynamic)) ));
HXLINE( 111)						this->dialogIndex++;
HXLINE( 113)						if (::Reg_obj::gui->isActive()) {
HXLINE( 115)							this->startDialog();
            						}
HXLINE( 107)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_0==HX_("index",12,9b,14,be)) ){
HXLINE( 118)						 ::Dynamic data1 = stack->get(HX_("data",2a,56,63,42));
HXLINE( 120)						this->dialogIndex = ::Std_obj::parseInt(( (::String)(data1->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) ));
HXLINE( 122)						if (::Reg_obj::gui->isActive()) {
HXLINE( 124)							this->startDialog();
            						}
HXLINE( 117)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE( 105)						 ::GUI _hx_tmp3 = ::Reg_obj::gui;
HXDLIN( 105)						_hx_tmp3->setText(( (::String)(stack->get(HX_("data",2a,56,63,42))) ));
HXLINE( 106)						this->dialogIndex++;
HXLINE( 104)						goto _hx_goto_13;
            					}
            					/* default */{
            					}
            					_hx_goto_13:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Character_obj,startDialog,(void))

int Character_obj::TILE_SIZE;

int Character_obj::MOVEMENT_SPEED;

int Character_obj::ANIMATION_SPEED;


hx::ObjectPtr< Character_obj > Character_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic) {
	hx::ObjectPtr< Character_obj > __this = new Character_obj();
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

hx::ObjectPtr< Character_obj > Character_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic) {
	Character_obj *__this = (Character_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Character_obj), true, "Character"));
	*(void **)__this = Character_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

Character_obj::Character_obj()
{
}

void Character_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Character);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(dialogIndex,"dialogIndex");
	HX_MARK_MEMBER_NAME(dialog,"dialog");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Character_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(dialogIndex,"dialogIndex");
	HX_VISIT_MEMBER_NAME(dialog,"dialog");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Character_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"dialog") ) { return hx::Val( dialog ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"execute") ) { return hx::Val( execute_dyn() ); }
		if (HX_FIELD_EQ(inName,"setLook") ) { return hx::Val( setLook_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dialogIndex") ) { return hx::Val( dialogIndex ); }
		if (HX_FIELD_EQ(inName,"startDialog") ) { return hx::Val( startDialog_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getDirection") ) { return hx::Val( getDirection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Character_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"dialog") ) { dialog=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dialogIndex") ) { dialogIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Character_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("dialogIndex","\x2a","\xb1","\x00","\xcc"));
	outFields->push(HX_HCSTRING("dialog","\xc8","\x04","\x33","\xb1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Character_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Character_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsString,(int)offsetof(Character_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(Character_obj,dialogIndex),HX_HCSTRING("dialogIndex","\x2a","\xb1","\x00","\xcc")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Character_obj,dialog),HX_HCSTRING("dialog","\xc8","\x04","\x33","\xb1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Character_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Character_obj::TILE_SIZE,HX_HCSTRING("TILE_SIZE","\xb2","\xaa","\xbd","\x5f")},
	{hx::fsInt,(void *) &Character_obj::MOVEMENT_SPEED,HX_HCSTRING("MOVEMENT_SPEED","\x17","\xb9","\xea","\xa5")},
	{hx::fsInt,(void *) &Character_obj::ANIMATION_SPEED,HX_HCSTRING("ANIMATION_SPEED","\x8c","\xb8","\x44","\x14")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Character_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("dialogIndex","\x2a","\xb1","\x00","\xcc"),
	HX_HCSTRING("dialog","\xc8","\x04","\x33","\xb1"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("execute","\x35","\x0a","\x0d","\xcc"),
	HX_HCSTRING("setLook","\x21","\xe7","\x3b","\x0d"),
	HX_HCSTRING("getDirection","\xc9","\xfe","\x96","\x1f"),
	HX_HCSTRING("startDialog","\xca","\x62","\x19","\x29"),
	::String(null()) };

static void Character_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Character_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Character_obj::TILE_SIZE,"TILE_SIZE");
	HX_MARK_MEMBER_NAME(Character_obj::MOVEMENT_SPEED,"MOVEMENT_SPEED");
	HX_MARK_MEMBER_NAME(Character_obj::ANIMATION_SPEED,"ANIMATION_SPEED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Character_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Character_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Character_obj::TILE_SIZE,"TILE_SIZE");
	HX_VISIT_MEMBER_NAME(Character_obj::MOVEMENT_SPEED,"MOVEMENT_SPEED");
	HX_VISIT_MEMBER_NAME(Character_obj::ANIMATION_SPEED,"ANIMATION_SPEED");
};

#endif

hx::Class Character_obj::__mClass;

static ::String Character_obj_sStaticFields[] = {
	HX_HCSTRING("TILE_SIZE","\xb2","\xaa","\xbd","\x5f"),
	HX_HCSTRING("MOVEMENT_SPEED","\x17","\xb9","\xea","\xa5"),
	HX_HCSTRING("ANIMATION_SPEED","\x8c","\xb8","\x44","\x14"),
	::String(null())
};

void Character_obj::__register()
{
	hx::Object *dummy = new Character_obj;
	Character_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Character","\x89","\xbb","\xa4","\xe3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Character_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Character_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Character_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Character_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Character_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Character_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Character_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Character_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ae240c01d039da8e_8_boot)
HXDLIN(   8)		TILE_SIZE = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ae240c01d039da8e_9_boot)
HXDLIN(   9)		MOVEMENT_SPEED = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ae240c01d039da8e_10_boot)
HXDLIN(  10)		ANIMATION_SPEED = (int)2;
            	}
}

