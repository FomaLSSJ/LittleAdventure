// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Door
#include <Door.h>
#endif
#ifndef INCLUDED_GUI
#include <GUI.h>
#endif
#ifndef INCLUDED_ImageLoad
#include <ImageLoad.h>
#endif
#ifndef INCLUDED_Inventory
#include <Inventory.h>
#endif
#ifndef INCLUDED_Item
#include <Item.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_TiledLevel
#include <TiledLevel.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledMap
#include <flixel/addons/editors/tiled/TiledMap.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_14_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",14,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_33_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",33,0xb30d7781)
static const int _hx_array_data_46c2835d_2[] = {
	(int)3,(int)3,
};
static const ::String _hx_array_data_46c2835d_3[] = {
	HX_("letter",e6,ac,08,a3),
};
static const ::String _hx_array_data_46c2835d_4[] = {
	HX_("diskette",7d,d1,07,40),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_113_loadMap,"PlayState","loadMap",0x531eae05,"PlayState.loadMap","PlayState.hx",113,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_111_loadMap,"PlayState","loadMap",0x531eae05,"PlayState.loadMap","PlayState.hx",111,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_168_destroy,"PlayState","destroy",0x6ec756e9,"PlayState.destroy","PlayState.hx",168,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_172_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",172,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_193_touchDoor,"PlayState","touchDoor",0x442d447c,"PlayState.touchDoor","PlayState.hx",193,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_14_new)
HXLINE(  30)		this->testing = false;
HXLINE(  28)		this->charactersGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  27)		this->doorsGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  26)		this->guiGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  25)		this->objectGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  24)		this->frontMap =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  23)		this->backMap =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  17)		this->posY = (int)128;
HXLINE(  16)		this->posX = (int)160;
HXLINE(  14)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x46c2835d;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_33_create)
HXLINE(  34)		this->super::create();
HXLINE(  36)		{
HXLINE(  36)			::Dynamic this1 = ::Reg_obj::itemsList;
HXDLIN(  36)			( ( ::haxe::ds::StringMap)(this1) )->set(HX_("letter",e6,ac,08,a3), ::Item_obj::__alloc( HX_CTX ,HX_("Letter",06,21,9d,d7),null(),null(),null(),null(),HX_("assets/images/letter.png",8c,f0,90,6f)));
            		}
HXLINE(  37)		{
HXLINE(  37)			::Dynamic this2 = ::Reg_obj::itemsList;
HXDLIN(  37)			( ( ::haxe::ds::StringMap)(this2) )->set(HX_("pencil",cd,f3,71,38), ::Item_obj::__alloc( HX_CTX ,HX_("Pencil",ed,67,06,6d),null(),null(),null(),null(),HX_("assets/images/pencil.png",f3,36,a5,7b)));
            		}
HXLINE(  38)		{
HXLINE(  38)			::Dynamic this3 = ::Reg_obj::itemsList;
HXDLIN(  38)			( ( ::haxe::ds::StringMap)(this3) )->set(HX_("diskette",7d,d1,07,40), ::Item_obj::__alloc( HX_CTX ,HX_("Diskette",9d,8d,b9,19),true,null(),null(),null(),HX_("assets/images/diskette.png",63,9d,45,c5)));
            		}
HXLINE(  40)		::Reg_obj::levels->set(HX_("global",63,31,b2,a7),HX_("assets/data/global.tmx",8d,b6,c7,37));
HXLINE(  41)		::Reg_obj::levels->set(HX_("home1f",f4,fa,f0,c6),HX_("assets/data/home1f.tmx",9e,1c,b9,d5));
HXLINE(  42)		::Reg_obj::levels->set(HX_("market",bc,75,70,ba),HX_("assets/data/market.tmx",66,9b,a1,ff));
HXLINE(  45)		::Reg_obj::inv->addItem(HX_("letter",e6,ac,08,a3),null());
HXLINE(  46)		::Reg_obj::inv->addItem(HX_("pencil",cd,f3,71,38),null());
HXLINE(  47)		::Reg_obj::inv->addItem(HX_("diskette",7d,d1,07,40),null());
HXLINE(  49)		::Reg_obj::inv->removeItem(HX_("letter",e6,ac,08,a3),(int)2);
HXLINE(  52)		this->loadMap(HX_("global",63,31,b2,a7),null(),null());
HXLINE(  54)		this->player =  ::Player_obj::__alloc( HX_CTX ,this->posX,this->posY,HX_("assets/images/char.png",bc,19,6f,4c));
HXLINE(  55)		this->objectGroup->add(this->player).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  65)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  65)		::String _hx_tmp1 = ::Reg_obj::inv->getItemsName();
HXDLIN(  65)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),65,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
HXLINE(  67)		 ::Character npc =  ::Character_obj::__alloc( HX_CTX ,(int)144,(int)208,HX_("assets/images/merchant.png",6e,1a,0f,8c));
HXLINE(  68)		npc->id = HX_("npc0001",62,b2,bb,c6);
HXLINE(  69)		npc->name = HX_("NPC Character",6a,48,a2,73);
HXLINE(  71)		 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  71)		_g->set(HX_("key",9f,89,51,00),HX_("string",d1,28,30,11));
HXDLIN(  71)		_g->set(HX_("data",2a,56,63,42),HX_("Richard: Hey how are you today!",de,02,a0,ff));
HXDLIN(  71)		 ::haxe::ds::StringMap _hx_tmp2 = _g;
HXLINE(  72)		 ::haxe::ds::StringMap _g1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  72)		_g1->set(HX_("key",9f,89,51,00),HX_("string",d1,28,30,11));
HXDLIN(  72)		_g1->set(HX_("data",2a,56,63,42),HX_("You: I'm ok, thank you.",6b,03,c2,34));
HXDLIN(  72)		 ::haxe::ds::StringMap _hx_tmp3 = _g1;
HXLINE(  73)		 ::haxe::ds::StringMap _g2 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  73)		_g2->set(HX_("key",9f,89,51,00),HX_("string",d1,28,30,11));
HXDLIN(  73)		_g2->set(HX_("data",2a,56,63,42),HX_("Richard: Do you want some candy?",ef,bc,ab,23));
HXDLIN(  73)		 ::haxe::ds::StringMap _hx_tmp4 = _g2;
HXLINE(  74)		 ::haxe::ds::StringMap _g3 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  74)		_g3->set(HX_("key",9f,89,51,00),HX_("function",18,ab,52,14));
HXDLIN(  74)		_g3->set(HX_("data",2a,56,63,42), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("field",ba,94,93,00),HX_("calc",95,18,ba,41))
            			->setFixed(1,HX_("args",5d,8d,74,40),::Array_obj< int >::fromData( _hx_array_data_46c2835d_2,2))));
HXDLIN(  74)		 ::haxe::ds::StringMap _hx_tmp5 = _g3;
HXLINE(  75)		 ::haxe::ds::StringMap _g4 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  75)		_g4->set(HX_("key",9f,89,51,00),HX_("string",d1,28,30,11));
HXDLIN(  75)		_g4->set(HX_("data",2a,56,63,42),HX_("You: No.",a8,6b,b9,2c));
HXDLIN(  75)		 ::haxe::ds::StringMap _hx_tmp6 = _g4;
HXLINE(  76)		 ::haxe::ds::StringMap _g5 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  76)		_g5->set(HX_("key",9f,89,51,00),HX_("string",d1,28,30,11));
HXDLIN(  76)		_g5->set(HX_("data",2a,56,63,42),HX_("Richard: Ok, take this Letter.",52,0c,e7,b3));
HXDLIN(  76)		 ::haxe::ds::StringMap _hx_tmp7 = _g5;
HXLINE(  77)		 ::haxe::ds::StringMap _g6 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  77)		_g6->set(HX_("key",9f,89,51,00),HX_("function",18,ab,52,14));
HXDLIN(  77)		_g6->set(HX_("data",2a,56,63,42), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("field",ba,94,93,00),HX_("addItem",d4,07,fd,81))
            			->setFixed(1,HX_("args",5d,8d,74,40),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_3,1))));
HXDLIN(  77)		 ::haxe::ds::StringMap _hx_tmp8 = _g6;
HXLINE(  78)		 ::haxe::ds::StringMap _g7 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  78)		_g7->set(HX_("key",9f,89,51,00),HX_("string",d1,28,30,11));
HXDLIN(  78)		_g7->set(HX_("data",2a,56,63,42),HX_("Richard: And this Diskette.",35,7e,f4,f3));
HXDLIN(  78)		 ::haxe::ds::StringMap _hx_tmp9 = _g7;
HXLINE(  79)		 ::haxe::ds::StringMap _g8 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  79)		_g8->set(HX_("key",9f,89,51,00),HX_("function",18,ab,52,14));
HXDLIN(  79)		_g8->set(HX_("data",2a,56,63,42), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("field",ba,94,93,00),HX_("addItem",d4,07,fd,81))
            			->setFixed(1,HX_("args",5d,8d,74,40),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_4,1))));
HXDLIN(  79)		 ::haxe::ds::StringMap _hx_tmp10 = _g8;
HXLINE(  80)		 ::haxe::ds::StringMap _g9 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  80)		_g9->set(HX_("key",9f,89,51,00),HX_("string",d1,28,30,11));
HXDLIN(  80)		_g9->set(HX_("data",2a,56,63,42),HX_("You: Thanks.",20,45,14,ec));
HXLINE(  70)		npc->dialog = ::Array_obj< ::Dynamic>::__new(10)->init(0,_hx_tmp2)->init(1,_hx_tmp3)->init(2,_hx_tmp4)->init(3,_hx_tmp5)->init(4,_hx_tmp6)->init(5,_hx_tmp7)->init(6,_hx_tmp8)->init(7,_hx_tmp9)->init(8,_hx_tmp10)->init(9,_g9);
HXLINE(  83)		::Reg_obj::charactersMap->set(npc->id,npc);
HXLINE(  84)		this->charactersGroup->add(npc).StaticCast<  ::Character >();
HXLINE(  86)		 ::Character bro =  ::Character_obj::__alloc( HX_CTX ,(int)320,(int)208,HX_("assets/images/char.png",bc,19,6f,4c));
HXLINE(  87)		bro->id = HX_("bro0001",20,d0,3f,89);
HXLINE(  88)		bro->name = HX_("Bro",7f,78,32,00);
HXLINE(  90)		 ::haxe::ds::StringMap _g10 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  90)		_g10->set(HX_("key",9f,89,51,00),HX_("string",d1,28,30,11));
HXDLIN(  90)		_g10->set(HX_("data",2a,56,63,42),HX_("Bro: Hey, Bro1!",04,04,f6,ed));
HXDLIN(  90)		 ::haxe::ds::StringMap _hx_tmp11 = _g10;
HXLINE(  91)		 ::haxe::ds::StringMap _g11 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  91)		_g11->set(HX_("key",9f,89,51,00),HX_("function",18,ab,52,14));
HXDLIN(  91)		_g11->set(HX_("data",2a,56,63,42), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("field",ba,94,93,00),HX_("endDialog",03,53,15,f1))
            			->setFixed(1,HX_("args",5d,8d,74,40),::cpp::VirtualArray_obj::__new(0))));
HXDLIN(  91)		 ::haxe::ds::StringMap _hx_tmp12 = _g11;
HXLINE(  92)		 ::haxe::ds::StringMap _g12 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  92)		_g12->set(HX_("key",9f,89,51,00),HX_("string",d1,28,30,11));
HXDLIN(  92)		_g12->set(HX_("data",2a,56,63,42),HX_("Bro: Hey, Bro2!",e3,04,f6,ed));
HXDLIN(  92)		 ::haxe::ds::StringMap _hx_tmp13 = _g12;
HXLINE(  93)		 ::haxe::ds::StringMap _g13 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  93)		_g13->set(HX_("key",9f,89,51,00),HX_("index",12,9b,14,be));
HXDLIN(  93)		_g13->set(HX_("data",2a,56,63,42), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("index",12,9b,14,be),(int)0)));
HXDLIN(  93)		 ::haxe::ds::StringMap _hx_tmp14 = _g13;
HXLINE(  94)		 ::haxe::ds::StringMap _g14 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  94)		_g14->set(HX_("key",9f,89,51,00),HX_("string",d1,28,30,11));
HXDLIN(  94)		_g14->set(HX_("data",2a,56,63,42),HX_("Bro: Hey, Bro3!",c2,05,f6,ed));
HXLINE(  89)		bro->dialog = ::Array_obj< ::Dynamic>::__new(5)->init(0,_hx_tmp11)->init(1,_hx_tmp12)->init(2,_hx_tmp13)->init(3,_hx_tmp14)->init(4,_g14);
HXLINE(  97)		::Reg_obj::charactersMap->set(bro->id,bro);
HXLINE(  98)		this->charactersGroup->add(bro).StaticCast<  ::Character >();
HXLINE( 100)		::Reg_obj::gui->init();
HXLINE( 101)		this->guiGroup->add(::Reg_obj::gui).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 103)		this->add(this->backMap);
HXLINE( 104)		this->add(this->objectGroup);
HXLINE( 105)		this->add(this->charactersGroup);
HXLINE( 106)		this->add(this->frontMap);
HXLINE( 107)		this->add(this->guiGroup);
            	}


void PlayState_obj::loadMap(::String map, ::Dynamic __o_playerX, ::Dynamic __o_playerY){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::Character _hx_char){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_113_loadMap)
HXLINE( 114)			{
HXLINE( 114)				::Dynamic this1 = ::Reg_obj::charactersTempData;
HXDLIN( 114)				::String key = _hx_char->id;
HXDLIN( 114)				::String char1 = _hx_char->id;
HXDLIN( 114)				Float char2 = _hx_char->x;
HXDLIN( 114)				Float char3 = _hx_char->y;
HXDLIN( 114)				::String char4 = _hx_char->name;
HXDLIN( 114)				::String value = ::Reg_obj::current;
HXDLIN( 114)				( ( ::haxe::ds::StringMap)(this1) )->set(key, ::Dynamic(hx::Anon_obj::Create(6)
            					->setFixed(0,HX_("x",78,00,00,00),char2)
            					->setFixed(1,HX_("y",79,00,00,00),char3)
            					->setFixed(2,HX_("id",db,5b,00,00),char1)
            					->setFixed(3,HX_("map",9c,0a,53,00),value)
            					->setFixed(4,HX_("direction",3f,62,40,10),_hx_char->getDirection())
            					->setFixed(5,HX_("name",4b,72,ff,48),char4)));
            			}
HXLINE( 115)			::haxe::Log_obj::trace(_hx_char->name, ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("PlayState",5d,83,c2,46))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(3)->init(0,_hx_char->x)->init(1,_hx_char->y)->init(2,::Reg_obj::current))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("loadMap",16,84,dd,08))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("PlayState.hx",81,77,0d,b3))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),(int)115)));
            		}
            		HX_END_LOCAL_FUNC1((void))

 ::Dynamic playerX = __o_playerX.Default(0);
 ::Dynamic playerY = __o_playerY.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_111_loadMap)
HXLINE( 112)		this->charactersGroup->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 118)		::Reg_obj::current = map;
HXLINE( 119)		::Reg_obj::level =  ::TiledLevel_obj::__alloc( HX_CTX ,::Reg_obj::levels->get(map));
HXLINE( 121)		this->backMap->clear();
HXLINE( 122)		this->frontMap->clear();
HXLINE( 123)		this->doorsGroup->clear();
HXLINE( 124)		this->charactersGroup->clear();
HXLINE( 126)		bool _hx_tmp;
HXDLIN( 126)		if (!(::Reg_obj::charactersMap->exists(HX_("girl0001",5d,3c,6e,f5)))) {
HXLINE( 126)			_hx_tmp = (map == HX_("home1f",f4,fa,f0,c6));
            		}
            		else {
HXLINE( 126)			_hx_tmp = false;
            		}
HXDLIN( 126)		if (_hx_tmp) {
HXLINE( 127)			 ::Character girl =  ::Character_obj::__alloc( HX_CTX ,(int)96,(int)96,HX_("assets/images/beachgirl.png",6f,91,e3,b4));
HXLINE( 128)			girl->id = HX_("girl0001",5d,3c,6e,f5);
HXLINE( 129)			girl->name = HX_("Beach Girl",79,cc,89,be);
HXLINE( 131)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 131)			_g->set(HX_("key",9f,89,51,00),HX_("string",d1,28,30,11));
HXDLIN( 131)			_g->set(HX_("data",2a,56,63,42),HX_("Girl: Hi!",fe,3e,5a,24));
HXLINE( 130)			girl->dialog = ::Array_obj< ::Dynamic>::__new(1)->init(0,_g);
HXLINE( 134)			::Reg_obj::charactersMap->set(girl->id,girl);
HXLINE( 135)			this->charactersGroup->add(girl).StaticCast<  ::Character >();
            		}
HXLINE( 138)		this->backMap->add(::Reg_obj::level->blockedtiles).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 139)		this->backMap->add(::Reg_obj::level->background).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 140)		this->frontMap->add(::Reg_obj::level->foreground).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 141)		this->doorsGroup->add(::Reg_obj::level->doors).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 143)		{
HXLINE( 143)			 ::Dynamic data = ::Reg_obj::charactersTempData->iterator();
HXDLIN( 143)			while(( (bool)(data->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 143)				 ::Dynamic data1 = data->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)();
HXLINE( 145)				if ((::Reg_obj::current == ( (::String)(data1->__Field(HX_("map",9c,0a,53,00),hx::paccDynamic)) ))) {
HXLINE( 147)					 ::flixel::group::FlxTypedGroup _hx_tmp1 = this->charactersGroup;
HXDLIN( 147)					_hx_tmp1->add(::Reg_obj::charactersMap->get( ::Dynamic(data1->__Field(HX_("id",db,5b,00,00),hx::paccDynamic))).StaticCast<  ::Character >()).StaticCast<  ::Character >();
            				}
            			}
            		}
HXLINE( 151)		bool _hx_tmp2;
HXDLIN( 151)		if (hx::IsNotEq( playerX,(int)0 )) {
HXLINE( 151)			_hx_tmp2 = hx::IsNotEq( playerY,(int)0 );
            		}
            		else {
HXLINE( 151)			_hx_tmp2 = false;
            		}
HXDLIN( 151)		if (_hx_tmp2) {
HXLINE( 153)			if (hx::IsNotNull( this->player )) {
HXLINE( 155)				 ::Player _hx_tmp3 = this->player;
HXDLIN( 155)				_hx_tmp3->set_x((playerX * (int)16));
HXLINE( 156)				 ::Player _hx_tmp4 = this->player;
HXDLIN( 156)				_hx_tmp4->set_y((playerY * (int)16));
            			}
            			else {
HXLINE( 160)				this->posX = (playerX * (int)16);
HXLINE( 161)				this->posY = (playerY * (int)16);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,loadMap,(void))

void PlayState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_168_destroy)
HXDLIN( 168)		this->super::destroy();
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_172_update)
HXLINE( 173)		this->super::update(elapsed);
HXLINE( 175)		::flixel::FlxG_obj::overlap(this->player,this->doorsGroup,this->touchDoor_dyn(),null());
HXLINE( 177)		if (::Reg_obj::level->collide(this->player)) {
HXLINE( 179)			this->player->moveToNextTile = false;
            		}
HXLINE( 181)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->charactersGroup) ),this->player->collideCharacters_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 184)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 184)		if (_this->keyManager->checkStatus((int)119,_this->status)) {
HXLINE( 187)			::Reg_obj::gui->toggleDialog();
            		}
            	}


void PlayState_obj::touchDoor( ::Player p, ::Door d){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_193_touchDoor)
HXDLIN( 193)		bool _hx_tmp;
HXDLIN( 193)		bool _hx_tmp1;
HXDLIN( 193)		if (p->overlaps(d,null(),null())) {
HXDLIN( 193)			_hx_tmp1 = d->active;
            		}
            		else {
HXDLIN( 193)			_hx_tmp1 = false;
            		}
HXDLIN( 193)		if (_hx_tmp1) {
HXDLIN( 193)			_hx_tmp = !(p->moveToDoor);
            		}
            		else {
HXDLIN( 193)			_hx_tmp = false;
            		}
HXDLIN( 193)		if (_hx_tmp) {
HXLINE( 195)			p->moveToDoor = true;
HXLINE( 196)			this->loadMap(d->map,d->posX,d->posY);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,touchDoor,(void))


hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(posX,"posX");
	HX_MARK_MEMBER_NAME(posY,"posY");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(username,"username");
	HX_MARK_MEMBER_NAME(backMap,"backMap");
	HX_MARK_MEMBER_NAME(frontMap,"frontMap");
	HX_MARK_MEMBER_NAME(objectGroup,"objectGroup");
	HX_MARK_MEMBER_NAME(guiGroup,"guiGroup");
	HX_MARK_MEMBER_NAME(doorsGroup,"doorsGroup");
	HX_MARK_MEMBER_NAME(charactersGroup,"charactersGroup");
	HX_MARK_MEMBER_NAME(testing,"testing");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(posX,"posX");
	HX_VISIT_MEMBER_NAME(posY,"posY");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(username,"username");
	HX_VISIT_MEMBER_NAME(backMap,"backMap");
	HX_VISIT_MEMBER_NAME(frontMap,"frontMap");
	HX_VISIT_MEMBER_NAME(objectGroup,"objectGroup");
	HX_VISIT_MEMBER_NAME(guiGroup,"guiGroup");
	HX_VISIT_MEMBER_NAME(doorsGroup,"doorsGroup");
	HX_VISIT_MEMBER_NAME(charactersGroup,"charactersGroup");
	HX_VISIT_MEMBER_NAME(testing,"testing");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"posX") ) { return hx::Val( posX ); }
		if (HX_FIELD_EQ(inName,"posY") ) { return hx::Val( posY ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"backMap") ) { return hx::Val( backMap ); }
		if (HX_FIELD_EQ(inName,"testing") ) { return hx::Val( testing ); }
		if (HX_FIELD_EQ(inName,"loadMap") ) { return hx::Val( loadMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"username") ) { return hx::Val( username ); }
		if (HX_FIELD_EQ(inName,"frontMap") ) { return hx::Val( frontMap ); }
		if (HX_FIELD_EQ(inName,"guiGroup") ) { return hx::Val( guiGroup ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"touchDoor") ) { return hx::Val( touchDoor_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"doorsGroup") ) { return hx::Val( doorsGroup ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"objectGroup") ) { return hx::Val( objectGroup ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"charactersGroup") ) { return hx::Val( charactersGroup ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"posX") ) { posX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"posY") ) { posY=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::ImageLoad >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"backMap") ) { backMap=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"testing") ) { testing=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"username") ) { username=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frontMap") ) { frontMap=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"guiGroup") ) { guiGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"doorsGroup") ) { doorsGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"objectGroup") ) { objectGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"charactersGroup") ) { charactersGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("posX","\x44","\x84","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("posY","\x45","\x84","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"));
	outFields->push(HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"));
	outFields->push(HX_HCSTRING("username","\x16","\x86","\xeb","\x20"));
	outFields->push(HX_HCSTRING("backMap","\xb5","\x7a","\x75","\xfb"));
	outFields->push(HX_HCSTRING("frontMap","\x73","\xb9","\x40","\x53"));
	outFields->push(HX_HCSTRING("objectGroup","\x00","\xd0","\x23","\x09"));
	outFields->push(HX_HCSTRING("guiGroup","\xc4","\x36","\x36","\x2d"));
	outFields->push(HX_HCSTRING("doorsGroup","\xba","\x59","\x5e","\x0d"));
	outFields->push(HX_HCSTRING("charactersGroup","\x35","\x22","\x00","\x6d"));
	outFields->push(HX_HCSTRING("testing","\xd0","\xc3","\xd6","\xbd"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(PlayState_obj,posX),HX_HCSTRING("posX","\x44","\x84","\x5c","\x4a")},
	{hx::fsInt,(int)offsetof(PlayState_obj,posY),HX_HCSTRING("posY","\x45","\x84","\x5c","\x4a")},
	{hx::fsObject /*::ImageLoad*/ ,(int)offsetof(PlayState_obj,image),HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd")},
	{hx::fsObject /*::Player*/ ,(int)offsetof(PlayState_obj,player),HX_HCSTRING("player","\x61","\xeb","\xb8","\x37")},
	{hx::fsString,(int)offsetof(PlayState_obj,username),HX_HCSTRING("username","\x16","\x86","\xeb","\x20")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,backMap),HX_HCSTRING("backMap","\xb5","\x7a","\x75","\xfb")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,frontMap),HX_HCSTRING("frontMap","\x73","\xb9","\x40","\x53")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,objectGroup),HX_HCSTRING("objectGroup","\x00","\xd0","\x23","\x09")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,guiGroup),HX_HCSTRING("guiGroup","\xc4","\x36","\x36","\x2d")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,doorsGroup),HX_HCSTRING("doorsGroup","\xba","\x59","\x5e","\x0d")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,charactersGroup),HX_HCSTRING("charactersGroup","\x35","\x22","\x00","\x6d")},
	{hx::fsBool,(int)offsetof(PlayState_obj,testing),HX_HCSTRING("testing","\xd0","\xc3","\xd6","\xbd")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("posX","\x44","\x84","\x5c","\x4a"),
	HX_HCSTRING("posY","\x45","\x84","\x5c","\x4a"),
	HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"),
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("username","\x16","\x86","\xeb","\x20"),
	HX_HCSTRING("backMap","\xb5","\x7a","\x75","\xfb"),
	HX_HCSTRING("frontMap","\x73","\xb9","\x40","\x53"),
	HX_HCSTRING("objectGroup","\x00","\xd0","\x23","\x09"),
	HX_HCSTRING("guiGroup","\xc4","\x36","\x36","\x2d"),
	HX_HCSTRING("doorsGroup","\xba","\x59","\x5e","\x0d"),
	HX_HCSTRING("charactersGroup","\x35","\x22","\x00","\x6d"),
	HX_HCSTRING("testing","\xd0","\xc3","\xd6","\xbd"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("loadMap","\x16","\x84","\xdd","\x08"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("touchDoor","\xcd","\x80","\xda","\x07"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

