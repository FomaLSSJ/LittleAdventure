// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_GUI
#include <GUI.h>
#endif
#ifndef INCLUDED_Inventory
#include <Inventory.h>
#endif
#ifndef INCLUDED_Item
#include <Item.h>
#endif
#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bc17b73fe0ecfee6_9_new,"GUI","new",0xabc594cd,"GUI.new","GUI.hx",9,0x84c9c343)
HX_LOCAL_STACK_FRAME(_hx_pos_bc17b73fe0ecfee6_30_update,"GUI","update",0xae1283bc,"GUI.update","GUI.hx",30,0x84c9c343)
HX_LOCAL_STACK_FRAME(_hx_pos_bc17b73fe0ecfee6_34_init,"GUI","init",0x9dd55603,"GUI.init","GUI.hx",34,0x84c9c343)
HX_LOCAL_STACK_FRAME(_hx_pos_bc17b73fe0ecfee6_82_toggleDialog,"GUI","toggleDialog",0x1937e56f,"GUI.toggleDialog","GUI.hx",82,0x84c9c343)
HX_LOCAL_STACK_FRAME(_hx_pos_bc17b73fe0ecfee6_88_toggleInventory,"GUI","toggleInventory",0x39603855,"GUI.toggleInventory","GUI.hx",88,0x84c9c343)
HX_LOCAL_STACK_FRAME(_hx_pos_bc17b73fe0ecfee6_104_updateInventory,"GUI","updateInventory",0x3c3e7b40,"GUI.updateInventory","GUI.hx",104,0x84c9c343)
HX_LOCAL_STACK_FRAME(_hx_pos_bc17b73fe0ecfee6_135_setText,"GUI","setText",0x16cf0c5c,"GUI.setText","GUI.hx",135,0x84c9c343)
HX_LOCAL_STACK_FRAME(_hx_pos_bc17b73fe0ecfee6_140_isActive,"GUI","isActive",0x313dedc3,"GUI.isActive","GUI.hx",140,0x84c9c343)

void GUI_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_bc17b73fe0ecfee6_9_new)
HXLINE(  21)		this->items =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  20)		this->inventory =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  19)		this->dialog =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  25)		super::__construct(null());
            	}

Dynamic GUI_obj::__CreateEmpty() { return new GUI_obj; }

void *GUI_obj::_hx_vtable = 0;

Dynamic GUI_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GUI_obj > _hx_result = new GUI_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GUI_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x00362a5b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x00362a5b;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c;
	}
}

void GUI_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_bc17b73fe0ecfee6_30_update)
HXDLIN(  30)		this->super::update(elapsed);
            	}


void GUI_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_bc17b73fe0ecfee6_34_init)
HXLINE(  35)		this->dialogBg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  36)		this->dialogBg->makeGraphic(::flixel::FlxG_obj::width,(int)60,(int)-13421773,null(),null());
HXLINE(  37)		this->dialogBg->scrollFactor->set((int)0,(int)0);
HXLINE(  38)		this->dialogBg->set_alpha(((Float).65));
HXLINE(  39)		this->dialog->add(this->dialogBg).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  41)		this->dialogText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)10,(int)10,(::flixel::FlxG_obj::width - (int)20),HX_("__TEXT__",2d,98,3a,33),null(),null());
HXLINE(  42)		this->dialog->add(this->dialogText).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  44)		this->status =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)10,(int)10,(int)128,::Reg_obj::name,null(),null());
HXLINE(  45)		this->status->scrollFactor->set((int)0,(int)0);
HXLINE(  46)		this->status->set_visible(false);
HXLINE(  47)		this->add(this->status);
HXLINE(  49)		this->blank =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  50)		this->blank->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,(int)-16777216,null(),null());
HXLINE(  51)		this->blank->scrollFactor->set((int)0,(int)0);
HXLINE(  52)		this->blank->set_visible(false);
HXLINE(  53)		this->add(this->blank);
HXLINE(  55)		this->dialog->set_visible(false);
HXLINE(  56)		this->add(this->dialog);
HXLINE(  58)		this->inventoryBg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  59)		this->inventoryBg->makeGraphic(::flixel::FlxG_obj::width,(int)90,(int)-13421773,null(),null());
HXLINE(  60)		this->inventoryBg->scrollFactor->set((int)0,(int)0);
HXLINE(  61)		this->inventoryBg->set_alpha(((Float).65));
HXLINE(  62)		 ::flixel::FlxSprite _hx_tmp = this->inventoryBg;
HXDLIN(  62)		int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN(  62)		_hx_tmp->set_y((_hx_tmp1 - this->inventoryBg->get_height()));
HXLINE(  63)		this->inventory->add(this->inventoryBg).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  65)		int _hx_tmp2 = ::flixel::FlxG_obj::height;
HXDLIN(  65)		Float _hx_tmp3 = ((_hx_tmp2 - this->inventoryBg->get_height()) + (int)10);
HXDLIN(  65)		this->inventoryText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)10,_hx_tmp3,(::flixel::FlxG_obj::width - (int)20),HX_("None",d8,3e,e3,33),null(),null());
HXLINE(  66)		this->inventory->add(this->inventoryText).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  68)		this->inventory->add(this->items).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  70)		this->selector =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  71)		this->selector->loadGraphic(HX_("assets/images/select.png",a2,21,5b,d2),null(),null(),null(),null(),null());
HXLINE(  72)		this->selector->scrollFactor->set((int)0,(int)0);
HXLINE(  73)		this->selector->set_visible(false);
HXLINE(  74)		this->selector->setPosition((int)10,(int)10);
HXLINE(  75)		this->inventory->add(this->selector).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  77)		this->inventory->set_visible(false);
HXLINE(  78)		this->add(this->inventory);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GUI_obj,init,(void))

void GUI_obj::toggleDialog(){
            	HX_STACKFRAME(&_hx_pos_bc17b73fe0ecfee6_82_toggleDialog)
HXLINE(  83)		this->dialog->set_visible(!(this->dialog->visible));
HXLINE(  84)		{
HXLINE(  84)			::Dynamic this1 = ::Reg_obj::triggers;
HXDLIN(  84)			( ( ::haxe::ds::StringMap)(this1) )->set(HX_("is_dialog",bd,6b,57,56),!(( (bool)(::Reg_obj::triggers->get(HX_("is_dialog",bd,6b,57,56))) )));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GUI_obj,toggleDialog,(void))

void GUI_obj::toggleInventory(){
            	HX_STACKFRAME(&_hx_pos_bc17b73fe0ecfee6_88_toggleInventory)
HXLINE(  89)		if (!(this->inventory->visible)) {
HXLINE(  91)			this->items->clear();
HXLINE(  92)			 ::Inventory _hx_tmp = ::Reg_obj::inv;
HXDLIN(  92)			_hx_tmp->updateItems(this->inventoryBg->get_height());
HXLINE(  93)			this->items->add(::Reg_obj::inv).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  95)			this->updateInventory();
            		}
HXLINE(  98)		this->inventory->set_visible(!(this->inventory->visible));
HXLINE(  99)		{
HXLINE(  99)			::Dynamic this1 = ::Reg_obj::triggers;
HXDLIN(  99)			( ( ::haxe::ds::StringMap)(this1) )->set(HX_("is_inventory",c7,16,c7,7f),!(( (bool)(::Reg_obj::triggers->get(HX_("is_inventory",c7,16,c7,7f))) )));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GUI_obj,toggleInventory,(void))

void GUI_obj::updateInventory(){
            	HX_STACKFRAME(&_hx_pos_bc17b73fe0ecfee6_104_updateInventory)
HXDLIN( 104)		if ((::Reg_obj::inv->length > (int)0)) {
HXLINE( 106)			 ::Item firstItem = ::Reg_obj::inv->getFirstExisting().StaticCast<  ::Item >();
HXLINE( 107)			 ::Dynamic select = ::Reg_obj::triggers->get(HX_("select",fc,1a,33,6a));
HXLINE( 109)			if (hx::IsEq(  ::Dynamic(select->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),(int)0 )) {
HXLINE( 111)				 ::Item item = Dynamic( ::Reg_obj::inv->members->__get(( (int)(select->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ))).StaticCast<  ::Item >();
HXLINE( 113)				if (item->multiple) {
HXLINE( 115)					 ::flixel::text::FlxText _hx_tmp = this->inventoryText;
HXDLIN( 115)					_hx_tmp->set_text((((HX_("Selected: ",e1,ed,81,bd) + item->name) + HX_(" i have ",a1,6d,2b,22)) + item->count));
            				}
            				else {
HXLINE( 119)					 ::flixel::text::FlxText _hx_tmp1 = this->inventoryText;
HXDLIN( 119)					_hx_tmp1->set_text((HX_("Selected: ",e1,ed,81,bd) + item->name));
            				}
HXLINE( 122)				this->selector->setPosition(item->x,item->y);
            			}
HXLINE( 125)			this->selector->set_visible(true);
            		}
            		else {
HXLINE( 129)			this->selector->set_visible(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GUI_obj,updateInventory,(void))

void GUI_obj::setText(::String text){
            	HX_STACKFRAME(&_hx_pos_bc17b73fe0ecfee6_135_setText)
HXDLIN( 135)		this->dialogText->set_text(text);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GUI_obj,setText,(void))

bool GUI_obj::isActive(){
            	HX_STACKFRAME(&_hx_pos_bc17b73fe0ecfee6_140_isActive)
HXDLIN( 140)		bool _hx_tmp;
HXDLIN( 140)		if (this->dialog->visible) {
HXDLIN( 140)			_hx_tmp = ( (bool)(::Reg_obj::triggers->get(HX_("is_dialog",bd,6b,57,56))) );
            		}
            		else {
HXDLIN( 140)			_hx_tmp = false;
            		}
HXDLIN( 140)		if (!(_hx_tmp)) {
HXLINE( 141)			if (this->inventory->visible) {
HXLINE( 141)				return ( (bool)(::Reg_obj::triggers->get(HX_("is_inventory",c7,16,c7,7f))) );
            			}
            			else {
HXLINE( 141)				return false;
            			}
            		}
            		else {
HXDLIN( 140)			return true;
            		}
HXDLIN( 140)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GUI_obj,isActive,return )


hx::ObjectPtr< GUI_obj > GUI_obj::__new() {
	hx::ObjectPtr< GUI_obj > __this = new GUI_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< GUI_obj > GUI_obj::__alloc(hx::Ctx *_hx_ctx) {
	GUI_obj *__this = (GUI_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GUI_obj), true, "GUI"));
	*(void **)__this = GUI_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GUI_obj::GUI_obj()
{
}

void GUI_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GUI);
	HX_MARK_MEMBER_NAME(dialogBg,"dialogBg");
	HX_MARK_MEMBER_NAME(dialogText,"dialogText");
	HX_MARK_MEMBER_NAME(blank,"blank");
	HX_MARK_MEMBER_NAME(status,"status");
	HX_MARK_MEMBER_NAME(inventoryBg,"inventoryBg");
	HX_MARK_MEMBER_NAME(inventoryText,"inventoryText");
	HX_MARK_MEMBER_NAME(selector,"selector");
	HX_MARK_MEMBER_NAME(dialog,"dialog");
	HX_MARK_MEMBER_NAME(inventory,"inventory");
	HX_MARK_MEMBER_NAME(items,"items");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GUI_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(dialogBg,"dialogBg");
	HX_VISIT_MEMBER_NAME(dialogText,"dialogText");
	HX_VISIT_MEMBER_NAME(blank,"blank");
	HX_VISIT_MEMBER_NAME(status,"status");
	HX_VISIT_MEMBER_NAME(inventoryBg,"inventoryBg");
	HX_VISIT_MEMBER_NAME(inventoryText,"inventoryText");
	HX_VISIT_MEMBER_NAME(selector,"selector");
	HX_VISIT_MEMBER_NAME(dialog,"dialog");
	HX_VISIT_MEMBER_NAME(inventory,"inventory");
	HX_VISIT_MEMBER_NAME(items,"items");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val GUI_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"blank") ) { return hx::Val( blank ); }
		if (HX_FIELD_EQ(inName,"items") ) { return hx::Val( items ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { return hx::Val( status ); }
		if (HX_FIELD_EQ(inName,"dialog") ) { return hx::Val( dialog ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setText") ) { return hx::Val( setText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dialogBg") ) { return hx::Val( dialogBg ); }
		if (HX_FIELD_EQ(inName,"selector") ) { return hx::Val( selector ); }
		if (HX_FIELD_EQ(inName,"isActive") ) { return hx::Val( isActive_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { return hx::Val( inventory ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dialogText") ) { return hx::Val( dialogText ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inventoryBg") ) { return hx::Val( inventoryBg ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"toggleDialog") ) { return hx::Val( toggleDialog_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inventoryText") ) { return hx::Val( inventoryText ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"toggleInventory") ) { return hx::Val( toggleInventory_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateInventory") ) { return hx::Val( updateInventory_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GUI_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"blank") ) { blank=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"items") ) { items=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { status=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialog") ) { dialog=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dialogBg") ) { dialogBg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selector") ) { selector=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { inventory=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dialogText") ) { dialogText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inventoryBg") ) { inventoryBg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inventoryText") ) { inventoryText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GUI_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("dialogBg","\xad","\x00","\x94","\xa7"));
	outFields->push(HX_HCSTRING("dialogText","\x95","\x01","\xfc","\xc0"));
	outFields->push(HX_HCSTRING("blank","\x54","\xdf","\xf1","\xb4"));
	outFields->push(HX_HCSTRING("status","\x32","\xe7","\xfb","\x05"));
	outFields->push(HX_HCSTRING("inventoryBg","\x81","\x8f","\x36","\xbc"));
	outFields->push(HX_HCSTRING("inventoryText","\x69","\xed","\x7e","\x2e"));
	outFields->push(HX_HCSTRING("selector","\x1f","\x33","\x6d","\xb1"));
	outFields->push(HX_HCSTRING("dialog","\xc8","\x04","\x33","\xb1"));
	outFields->push(HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48"));
	outFields->push(HX_HCSTRING("items","\x00","\xac","\x0c","\xc2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GUI_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(GUI_obj,dialogBg),HX_HCSTRING("dialogBg","\xad","\x00","\x94","\xa7")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(GUI_obj,dialogText),HX_HCSTRING("dialogText","\x95","\x01","\xfc","\xc0")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(GUI_obj,blank),HX_HCSTRING("blank","\x54","\xdf","\xf1","\xb4")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(GUI_obj,status),HX_HCSTRING("status","\x32","\xe7","\xfb","\x05")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(GUI_obj,inventoryBg),HX_HCSTRING("inventoryBg","\x81","\x8f","\x36","\xbc")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(GUI_obj,inventoryText),HX_HCSTRING("inventoryText","\x69","\xed","\x7e","\x2e")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(GUI_obj,selector),HX_HCSTRING("selector","\x1f","\x33","\x6d","\xb1")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(GUI_obj,dialog),HX_HCSTRING("dialog","\xc8","\x04","\x33","\xb1")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(GUI_obj,inventory),HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(GUI_obj,items),HX_HCSTRING("items","\x00","\xac","\x0c","\xc2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GUI_obj_sStaticStorageInfo = 0;
#endif

static ::String GUI_obj_sMemberFields[] = {
	HX_HCSTRING("dialogBg","\xad","\x00","\x94","\xa7"),
	HX_HCSTRING("dialogText","\x95","\x01","\xfc","\xc0"),
	HX_HCSTRING("blank","\x54","\xdf","\xf1","\xb4"),
	HX_HCSTRING("status","\x32","\xe7","\xfb","\x05"),
	HX_HCSTRING("inventoryBg","\x81","\x8f","\x36","\xbc"),
	HX_HCSTRING("inventoryText","\x69","\xed","\x7e","\x2e"),
	HX_HCSTRING("selector","\x1f","\x33","\x6d","\xb1"),
	HX_HCSTRING("dialog","\xc8","\x04","\x33","\xb1"),
	HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48"),
	HX_HCSTRING("items","\x00","\xac","\x0c","\xc2"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("toggleDialog","\x7c","\x1f","\x4d","\x57"),
	HX_HCSTRING("toggleInventory","\x68","\x04","\x63","\x95"),
	HX_HCSTRING("updateInventory","\x53","\x47","\x41","\x98"),
	HX_HCSTRING("setText","\x6f","\x0d","\x7e","\x12"),
	HX_HCSTRING("isActive","\x50","\xdd","\xaf","\x6e"),
	::String(null()) };

static void GUI_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GUI_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GUI_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GUI_obj::__mClass,"__mClass");
};

#endif

hx::Class GUI_obj::__mClass;

void GUI_obj::__register()
{
	hx::Object *dummy = new GUI_obj;
	GUI_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("GUI","\x5b","\x2a","\x36","\x00");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GUI_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GUI_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GUI_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GUI_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GUI_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GUI_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

