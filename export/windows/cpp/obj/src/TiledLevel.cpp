// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Door
#include <Door.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TiledLevel
#include <TiledLevel.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledLayer
#include <flixel/addons/editors/tiled/TiledLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledLayerType
#include <flixel/addons/editors/tiled/TiledLayerType.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledMap
#include <flixel/addons/editors/tiled/TiledMap.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledObject
#include <flixel/addons/editors/tiled/TiledObject.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledObjectLayer
#include <flixel/addons/editors/tiled/TiledObjectLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledPropertySet
#include <flixel/addons/editors/tiled/TiledPropertySet.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTileLayer
#include <flixel/addons/editors/tiled/TiledTileLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTileSet
#include <flixel/addons/editors/tiled/TiledTileSet.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapAutoTiling
#include <flixel/tile/FlxTilemapAutoTiling.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_afa3bb20ec4a38c0_13_new,"TiledLevel","new",0x39f0e040,"TiledLevel.new","TiledLevel.hx",13,0x7c3de730)
HX_LOCAL_STACK_FRAME(_hx_pos_afa3bb20ec4a38c0_77_getStartGid,"TiledLevel","getStartGid",0xbf85e356,"TiledLevel.getStartGid","TiledLevel.hx",77,0x7c3de730)
HX_LOCAL_STACK_FRAME(_hx_pos_afa3bb20ec4a38c0_96_collide,"TiledLevel","collide",0xb5f62f5e,"TiledLevel.collide","TiledLevel.hx",96,0x7c3de730)

void TiledLevel_obj::__construct( ::Dynamic Data){
            	HX_GC_STACKFRAME(&_hx_pos_afa3bb20ec4a38c0_13_new)
HXLINE(  15)		this->doors =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  27)		super::__construct(Data,null());
HXLINE(  29)		this->tileSize = this->tileWidth;
HXLINE(  30)		this->mapWidth = this->width;
HXLINE(  31)		this->mapHeight = this->height;
HXLINE(  33)		{
HXLINE(  33)			int _g = (int)0;
HXDLIN(  33)			::Array< ::Dynamic> _g1 = this->layers;
HXDLIN(  33)			while((_g < _g1->length)){
HXLINE(  33)				 ::flixel::addons::editors::tiled::TiledLayer layer = _g1->__get(_g).StaticCast<  ::flixel::addons::editors::tiled::TiledLayer >();
HXDLIN(  33)				_g = (_g + (int)1);
HXLINE(  41)				if (hx::IsEq( layer->type,::flixel::addons::editors::tiled::TiledLayerType_obj::TILE_dyn() )) {
HXLINE(  43)					 ::flixel::addons::editors::tiled::TiledTileLayer layerData = ( ( ::flixel::addons::editors::tiled::TiledTileLayer)(layer) );
HXLINE(  45)					::String tilesetName = ( (::String)(::haxe::IMap_obj::get(layer->properties->keys,HX_("tileset",34,81,93,45))) );
HXLINE(  46)					::String tilesetPath = (HX_("assets/images/",ab,47,cb,9f) + tilesetName);
HXLINE(  47)					int tileGID = this->getStartGid(tilesetName);
HXLINE(  49)					 ::flixel::tile::FlxTilemap level =  ::flixel::tile::FlxTilemap_obj::__alloc( HX_CTX );
HXLINE(  51)					::Array< int > _hx_tmp = layerData->get_tileArray();
HXDLIN(  51)					level->loadMapFromArray(_hx_tmp,this->width,this->height,tilesetPath,this->tileSize,this->tileSize,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn(),tileGID,(int)1,(int)1);
HXLINE(  53)					{
HXLINE(  53)						::String _g2 = layer->name;
HXDLIN(  53)						::String _hx_switch_0 = _g2;
            						if (  (_hx_switch_0==HX_("background",ee,93,1d,26)) ){
HXLINE(  56)							this->background = level;
HXDLIN(  56)							goto _hx_goto_1;
            						}
            						if (  (_hx_switch_0==HX_("blockedtiles",19,6b,b5,d8)) ){
HXLINE(  60)							this->blockedtiles = level;
HXDLIN(  60)							goto _hx_goto_1;
            						}
            						if (  (_hx_switch_0==HX_("foreground",c3,18,ef,10)) ){
HXLINE(  58)							this->foreground = level;
HXDLIN(  58)							goto _hx_goto_1;
            						}
            						_hx_goto_1:;
            					}
            				}
HXLINE(  63)				if (hx::IsEq( layer->type,::flixel::addons::editors::tiled::TiledLayerType_obj::OBJECT_dyn() )) {
HXLINE(  65)					 ::flixel::addons::editors::tiled::TiledObjectLayer objectData = ( ( ::flixel::addons::editors::tiled::TiledObjectLayer)(layer) );
HXLINE(  67)					{
HXLINE(  67)						int _g21 = (int)0;
HXDLIN(  67)						::Array< ::Dynamic> _g3 = objectData->objects;
HXDLIN(  67)						while((_g21 < _g3->length)){
HXLINE(  67)							 ::flixel::addons::editors::tiled::TiledObject object = _g3->__get(_g21).StaticCast<  ::flixel::addons::editors::tiled::TiledObject >();
HXDLIN(  67)							_g21 = (_g21 + (int)1);
HXLINE(  69)							int object1 = object->x;
HXDLIN(  69)							int object2 = object->y;
HXDLIN(  69)							::String door = ( (::String)(::haxe::IMap_obj::get(object->properties->keys,HX_("map",9c,0a,53,00))) );
HXDLIN(  69)							 ::Dynamic door1 = ::Std_obj::parseInt(( (::String)(::haxe::IMap_obj::get(object->properties->keys,HX_("posX",44,84,5c,4a))) ));
HXDLIN(  69)							 ::Door door2 =  ::Door_obj::__alloc( HX_CTX ,object1,object2,door,door1,::Std_obj::parseInt(( (::String)(::haxe::IMap_obj::get(object->properties->keys,HX_("posY",45,84,5c,4a))) )));
HXLINE(  70)							this->doors->add(door2).StaticCast<  ::Door >();
            						}
            					}
            				}
            			}
            		}
            	}

Dynamic TiledLevel_obj::__CreateEmpty() { return new TiledLevel_obj; }

void *TiledLevel_obj::_hx_vtable = 0;

Dynamic TiledLevel_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TiledLevel_obj > _hx_result = new TiledLevel_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TiledLevel_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x27f4004e) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x27f4004e;
	} else {
		return inClassId==(int)0x708f1085;
	}
}

int TiledLevel_obj::getStartGid(::String tilesetName){
            	HX_GC_STACKFRAME(&_hx_pos_afa3bb20ec4a38c0_77_getStartGid)
HXLINE(  78)		int tileGID = (int)1;
HXLINE(  80)		{
HXLINE(  80)			 ::Dynamic tileset = this->tilesets->iterator();
HXDLIN(  80)			while(( (bool)(tileset->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  80)				 ::flixel::addons::editors::tiled::TiledTileSet tileset1 = ( ( ::flixel::addons::editors::tiled::TiledTileSet)(tileset->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  82)				 ::haxe::io::Path tilesetPath =  ::haxe::io::Path_obj::__alloc( HX_CTX ,tileset1->imageSource);
HXLINE(  83)				::String thisTilesetName = ((tilesetPath->file + HX_(".",2e,00,00,00)) + tilesetPath->ext);
HXLINE(  85)				if ((thisTilesetName == tilesetName)) {
HXLINE(  87)					tileGID = tileset1->firstGID;
            				}
            			}
            		}
HXLINE(  91)		return tileGID;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledLevel_obj,getStartGid,return )

bool TiledLevel_obj::collide( ::flixel::FlxObject object){
            	HX_STACKFRAME(&_hx_pos_afa3bb20ec4a38c0_96_collide)
HXDLIN(  96)		return ::flixel::FlxG_obj::overlap(object,( ( ::flixel::FlxBasic)(this->blockedtiles) ),null(),::flixel::FlxObject_obj::separate_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledLevel_obj,collide,return )


hx::ObjectPtr< TiledLevel_obj > TiledLevel_obj::__new( ::Dynamic Data) {
	hx::ObjectPtr< TiledLevel_obj > __this = new TiledLevel_obj();
	__this->__construct(Data);
	return __this;
}

hx::ObjectPtr< TiledLevel_obj > TiledLevel_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic Data) {
	TiledLevel_obj *__this = (TiledLevel_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TiledLevel_obj), true, "TiledLevel"));
	*(void **)__this = TiledLevel_obj::_hx_vtable;
	__this->__construct(Data);
	return __this;
}

TiledLevel_obj::TiledLevel_obj()
{
}

void TiledLevel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TiledLevel);
	HX_MARK_MEMBER_NAME(doors,"doors");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(foreground,"foreground");
	HX_MARK_MEMBER_NAME(blockedtiles,"blockedtiles");
	HX_MARK_MEMBER_NAME(tileSize,"tileSize");
	HX_MARK_MEMBER_NAME(mapWidth,"mapWidth");
	HX_MARK_MEMBER_NAME(mapHeight,"mapHeight");
	 ::flixel::addons::editors::tiled::TiledMap_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TiledLevel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(doors,"doors");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(foreground,"foreground");
	HX_VISIT_MEMBER_NAME(blockedtiles,"blockedtiles");
	HX_VISIT_MEMBER_NAME(tileSize,"tileSize");
	HX_VISIT_MEMBER_NAME(mapWidth,"mapWidth");
	HX_VISIT_MEMBER_NAME(mapHeight,"mapHeight");
	 ::flixel::addons::editors::tiled::TiledMap_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TiledLevel_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"doors") ) { return hx::Val( doors ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"collide") ) { return hx::Val( collide_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tileSize") ) { return hx::Val( tileSize ); }
		if (HX_FIELD_EQ(inName,"mapWidth") ) { return hx::Val( mapWidth ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mapHeight") ) { return hx::Val( mapHeight ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"foreground") ) { return hx::Val( foreground ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getStartGid") ) { return hx::Val( getStartGid_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"blockedtiles") ) { return hx::Val( blockedtiles ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TiledLevel_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"doors") ) { doors=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tileSize") ) { tileSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mapWidth") ) { mapWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mapHeight") ) { mapHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"foreground") ) { foreground=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"blockedtiles") ) { blockedtiles=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TiledLevel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("doors","\x45","\x4f","\xc5","\xdd"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("foreground","\xc3","\x18","\xef","\x10"));
	outFields->push(HX_HCSTRING("blockedtiles","\x19","\x6b","\xb5","\xd8"));
	outFields->push(HX_HCSTRING("tileSize","\x0f","\xc7","\x59","\x86"));
	outFields->push(HX_HCSTRING("mapWidth","\xca","\x25","\xa5","\x41"));
	outFields->push(HX_HCSTRING("mapHeight","\xa3","\x63","\x2b","\xe5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TiledLevel_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(TiledLevel_obj,doors),HX_HCSTRING("doors","\x45","\x4f","\xc5","\xdd")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(TiledLevel_obj,background),HX_HCSTRING("background","\xee","\x93","\x1d","\x26")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(TiledLevel_obj,foreground),HX_HCSTRING("foreground","\xc3","\x18","\xef","\x10")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(TiledLevel_obj,blockedtiles),HX_HCSTRING("blockedtiles","\x19","\x6b","\xb5","\xd8")},
	{hx::fsInt,(int)offsetof(TiledLevel_obj,tileSize),HX_HCSTRING("tileSize","\x0f","\xc7","\x59","\x86")},
	{hx::fsInt,(int)offsetof(TiledLevel_obj,mapWidth),HX_HCSTRING("mapWidth","\xca","\x25","\xa5","\x41")},
	{hx::fsInt,(int)offsetof(TiledLevel_obj,mapHeight),HX_HCSTRING("mapHeight","\xa3","\x63","\x2b","\xe5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TiledLevel_obj_sStaticStorageInfo = 0;
#endif

static ::String TiledLevel_obj_sMemberFields[] = {
	HX_HCSTRING("doors","\x45","\x4f","\xc5","\xdd"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("foreground","\xc3","\x18","\xef","\x10"),
	HX_HCSTRING("blockedtiles","\x19","\x6b","\xb5","\xd8"),
	HX_HCSTRING("tileSize","\x0f","\xc7","\x59","\x86"),
	HX_HCSTRING("mapWidth","\xca","\x25","\xa5","\x41"),
	HX_HCSTRING("mapHeight","\xa3","\x63","\x2b","\xe5"),
	HX_HCSTRING("getStartGid","\x76","\xf3","\x85","\x68"),
	HX_HCSTRING("collide","\x7e","\xaf","\x63","\xed"),
	::String(null()) };

static void TiledLevel_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TiledLevel_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TiledLevel_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TiledLevel_obj::__mClass,"__mClass");
};

#endif

hx::Class TiledLevel_obj::__mClass;

void TiledLevel_obj::__register()
{
	hx::Object *dummy = new TiledLevel_obj;
	TiledLevel_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("TiledLevel","\x4e","\x00","\xf4","\x27");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TiledLevel_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TiledLevel_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TiledLevel_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TiledLevel_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TiledLevel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TiledLevel_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

