// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_Request
#include <Request.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Http
#include <haxe/Http.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_93f8010b997e1ee9_16_new,"Request","new",0xb1766ba1,"Request.new","Request.hx",16,0xf79ca2ef)
HX_LOCAL_STACK_FRAME(_hx_pos_93f8010b997e1ee9_36_login,"Request","login",0xac6486ea,"Request.login","Request.hx",36,0xf79ca2ef)
HX_LOCAL_STACK_FRAME(_hx_pos_93f8010b997e1ee9_52_login,"Request","login",0xac6486ea,"Request.login","Request.hx",52,0xf79ca2ef)
HX_LOCAL_STACK_FRAME(_hx_pos_93f8010b997e1ee9_60_login,"Request","login",0xac6486ea,"Request.login","Request.hx",60,0xf79ca2ef)
HX_LOCAL_STACK_FRAME(_hx_pos_93f8010b997e1ee9_66_login,"Request","login",0xac6486ea,"Request.login","Request.hx",66,0xf79ca2ef)
HX_LOCAL_STACK_FRAME(_hx_pos_93f8010b997e1ee9_24_login,"Request","login",0xac6486ea,"Request.login","Request.hx",24,0xf79ca2ef)
HX_LOCAL_STACK_FRAME(_hx_pos_93f8010b997e1ee9_78_test,"Request","test",0x9a1f05f1,"Request.test","Request.hx",78,0xf79ca2ef)
HX_LOCAL_STACK_FRAME(_hx_pos_93f8010b997e1ee9_73_test,"Request","test",0x9a1f05f1,"Request.test","Request.hx",73,0xf79ca2ef)

void Request_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_93f8010b997e1ee9_16_new)
HXDLIN(  16)		this->callback = null();
            	}

Dynamic Request_obj::__CreateEmpty() { return new Request_obj; }

void *Request_obj::_hx_vtable = 0;

Dynamic Request_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Request_obj > _hx_result = new Request_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Request_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x11d6072f;
}

void Request_obj::login(::String login,::String password, ::flixel::text::FlxText message, ::Dynamic Callback){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::flixel::text::FlxText,message, ::Request,_gthis) HXARGC(1)
            		void _hx_run(::String data){
            			HX_GC_STACKFRAME(&_hx_pos_93f8010b997e1ee9_36_login)
HXLINE(  37)			_gthis->object =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->parseRec();
HXLINE(  38)			::haxe::Log_obj::trace( ::Dynamic(_gthis->object->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic)),hx::SourceInfo(HX_("Request.hx",ef,a2,9c,f7),38,HX_("Request",2f,07,d6,11),HX_("login",69,d9,f3,78)));
HXLINE(  39)			{
HXLINE(  39)				 ::flixel::text::FlxText _g = message;
HXDLIN(  39)				::String _g1 = _g->text;
HXDLIN(  39)				::String _hx_tmp = (((HX_("Status: ",78,86,db,43) + ::Std_obj::string( ::Dynamic(_gthis->object->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic)))) + HX_("\n",0a,00,00,00)) + HX_("Message: ",0d,88,f2,ca));
HXDLIN(  39)				_g->set_text((_g1 + ((_hx_tmp + ::Std_obj::string( ::Dynamic(_gthis->object->__Field(HX_("message",c7,35,11,9a),hx::paccDynamic)))) + HX_("\n",0a,00,00,00))));
            			}
HXLINE(  41)			if (( (bool)(_gthis->object->__Field(HX_("status",32,e7,fb,05),hx::paccDynamic)) )) {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Request,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer t){
            					HX_GC_STACKFRAME(&_hx_pos_93f8010b997e1ee9_52_login)
HXLINE(  53)					{
HXLINE(  53)						 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN(  53)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  53)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
HXLINE(  54)					_gthis->callback();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  43)				::Reg_obj::name = ( (::String)(_gthis->object->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE(  45)				if (( (bool)(_gthis->object->__Field(HX_("image",5b,1f,69,bd),hx::paccDynamic)) )) {
HXLINE(  47)					::Reg_obj::image = (HX_("images/users/",1e,e3,f9,9b) + ::Std_obj::string( ::Dynamic(_gthis->object->__Field(HX_("image",5b,1f,69,bd),hx::paccDynamic))));
            				}
HXLINE(  50)				_gthis->timerElapsed = (int)0;
HXLINE(  51)				_gthis->timerStart =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)3.0), ::Dynamic(new _hx_Closure_0(_gthis)),(int)0);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::flixel::text::FlxText,message) HXARGC(1)
            		void _hx_run(::String data1){
            			HX_GC_STACKFRAME(&_hx_pos_93f8010b997e1ee9_60_login)
HXLINE(  61)			{
HXLINE(  61)				 ::flixel::text::FlxText _g2 = message;
HXDLIN(  61)				::String _g3 = _g2->text;
HXDLIN(  61)				_g2->set_text((_g3 + (data1 + HX_("\n",0a,00,00,00))));
            			}
HXLINE(  62)			::haxe::Log_obj::trace(data1,hx::SourceInfo(HX_("Request.hx",ef,a2,9c,f7),62,HX_("Request",2f,07,d6,11),HX_("login",69,d9,f3,78)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::flixel::text::FlxText,message) HXARGC(1)
            		void _hx_run(int data2){
            			HX_GC_STACKFRAME(&_hx_pos_93f8010b997e1ee9_66_login)
HXLINE(  67)			{
HXLINE(  67)				 ::flixel::text::FlxText _g4 = message;
HXDLIN(  67)				::String _g5 = _g4->text;
HXDLIN(  67)				_g4->set_text((_g5 + ((HX_("Status Code: ",41,28,a2,a0) + data2) + HX_("\n",0a,00,00,00))));
            			}
HXLINE(  68)			::haxe::Log_obj::trace(data2,hx::SourceInfo(HX_("Request.hx",ef,a2,9c,f7),68,HX_("Request",2f,07,d6,11),HX_("login",69,d9,f3,78)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_93f8010b997e1ee9_24_login)
HXLINE(  23)		 ::Request _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  25)		this->callback = Callback;
HXLINE(  27)		message->set_text((HX_("Request data...",13,02,12,64) + HX_("\n",0a,00,00,00)));
HXLINE(  29)		this->req =  ::haxe::Http_obj::__alloc( HX_CTX ,(::Reg_obj::server + HX_("/users/login",d3,64,d3,fc)));
HXLINE(  30)		this->req->setHeader(HX_("content-type",8e,f1,71,89),HX_("application/x-www-form-urlencoded",9e,61,91,fa));
HXLINE(  31)		this->req->addParameter(HX_("username",16,86,eb,20),login);
HXLINE(  32)		this->req->addParameter(HX_("password",1b,23,d0,48),password);
HXLINE(  33)		this->req->request(true);
HXLINE(  35)		this->req->onData =  ::Dynamic(new _hx_Closure_1(message,_gthis));
HXLINE(  59)		this->req->onError =  ::Dynamic(new _hx_Closure_2(message));
HXLINE(  65)		this->req->onStatus =  ::Dynamic(new _hx_Closure_3(message));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Request_obj,login,(void))

void Request_obj::test(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Request,_gthis) HXARGC(1)
            		void _hx_run(::String data){
            			HX_GC_STACKFRAME(&_hx_pos_93f8010b997e1ee9_78_test)
HXLINE(  79)			_gthis->object =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->parseRec();
HXLINE(  80)			::haxe::Log_obj::trace( ::Dynamic(_gthis->object->__Field(HX_("text",ad,cc,f9,4c),hx::paccDynamic)),hx::SourceInfo(HX_("Request.hx",ef,a2,9c,f7),80,HX_("Request",2f,07,d6,11),HX_("test",52,c8,f9,4c)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_93f8010b997e1ee9_73_test)
HXLINE(  72)		 ::Request _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  74)		this->req =  ::haxe::Http_obj::__alloc( HX_CTX ,(::Reg_obj::server + HX_("/users/test",28,18,a0,ba)));
HXLINE(  75)		this->req->request(false);
HXLINE(  77)		this->req->onData =  ::Dynamic(new _hx_Closure_0(_gthis));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Request_obj,test,(void))


hx::ObjectPtr< Request_obj > Request_obj::__new() {
	hx::ObjectPtr< Request_obj > __this = new Request_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Request_obj > Request_obj::__alloc(hx::Ctx *_hx_ctx) {
	Request_obj *__this = (Request_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Request_obj), true, "Request"));
	*(void **)__this = Request_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Request_obj::Request_obj()
{
}

void Request_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Request);
	HX_MARK_MEMBER_NAME(req,"req");
	HX_MARK_MEMBER_NAME(object,"object");
	HX_MARK_MEMBER_NAME(timerStart,"timerStart");
	HX_MARK_MEMBER_NAME(timerElapsed,"timerElapsed");
	HX_MARK_MEMBER_NAME(callback,"callback");
	HX_MARK_END_CLASS();
}

void Request_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(req,"req");
	HX_VISIT_MEMBER_NAME(object,"object");
	HX_VISIT_MEMBER_NAME(timerStart,"timerStart");
	HX_VISIT_MEMBER_NAME(timerElapsed,"timerElapsed");
	HX_VISIT_MEMBER_NAME(callback,"callback");
}

hx::Val Request_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"req") ) { return hx::Val( req ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"test") ) { return hx::Val( test_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"login") ) { return hx::Val( login_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { return hx::Val( object ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { return hx::Val( callback ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"timerStart") ) { return hx::Val( timerStart ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"timerElapsed") ) { return hx::Val( timerElapsed ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Request_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"req") ) { req=inValue.Cast<  ::haxe::Http >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { object=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"timerStart") ) { timerStart=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"timerElapsed") ) { timerElapsed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Request_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("req","\x5e","\xd9","\x56","\x00"));
	outFields->push(HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"));
	outFields->push(HX_HCSTRING("timerStart","\x5d","\xda","\x1c","\x15"));
	outFields->push(HX_HCSTRING("timerElapsed","\xf7","\xb2","\x73","\xbf"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Request_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::Http*/ ,(int)offsetof(Request_obj,req),HX_HCSTRING("req","\x5e","\xd9","\x56","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Request_obj,object),HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15")},
	{hx::fsObject /*::flixel::util::FlxTimer*/ ,(int)offsetof(Request_obj,timerStart),HX_HCSTRING("timerStart","\x5d","\xda","\x1c","\x15")},
	{hx::fsFloat,(int)offsetof(Request_obj,timerElapsed),HX_HCSTRING("timerElapsed","\xf7","\xb2","\x73","\xbf")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Request_obj,callback),HX_HCSTRING("callback","\xc5","\x99","\x06","\x7f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Request_obj_sStaticStorageInfo = 0;
#endif

static ::String Request_obj_sMemberFields[] = {
	HX_HCSTRING("req","\x5e","\xd9","\x56","\x00"),
	HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"),
	HX_HCSTRING("timerStart","\x5d","\xda","\x1c","\x15"),
	HX_HCSTRING("timerElapsed","\xf7","\xb2","\x73","\xbf"),
	HX_HCSTRING("callback","\xc5","\x99","\x06","\x7f"),
	HX_HCSTRING("login","\x69","\xd9","\xf3","\x78"),
	HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"),
	::String(null()) };

static void Request_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Request_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Request_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Request_obj::__mClass,"__mClass");
};

#endif

hx::Class Request_obj::__mClass;

void Request_obj::__register()
{
	hx::Object *dummy = new Request_obj;
	Request_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Request","\x2f","\x07","\xd6","\x11");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Request_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Request_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Request_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Request_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Request_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Request_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

