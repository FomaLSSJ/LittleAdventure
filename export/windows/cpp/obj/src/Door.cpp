// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Door
#include <Door.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5d779b35da93c4b8_13_new,"Door","new",0x5d3b9d80,"Door.new","Door.hx",13,0xa24891f0)
HX_LOCAL_STACK_FRAME(_hx_pos_5d779b35da93c4b8_24_update,"Door","update",0x8a62ace9,"Door.update","Door.hx",24,0xa24891f0)

void Door_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String map,int posX,int posY){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_5d779b35da93c4b8_13_new)
HXLINE(  14)		super::__construct(X,Y,null());
HXLINE(  16)		this->map = map;
HXLINE(  17)		this->posX = posX;
HXLINE(  18)		this->posY = posY;
HXLINE(  20)		this->makeGraphic((int)16,(int)16,(int)0,null(),null());
            	}

Dynamic Door_obj::__CreateEmpty() { return new Door_obj; }

void *Door_obj::_hx_vtable = 0;

Dynamic Door_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Door_obj > _hx_result = new Door_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Door_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2d471d8e || inClassId==(int)0x2e105115;
	}
}

void Door_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_5d779b35da93c4b8_24_update)
HXLINE(  25)		this->super::update(elapsed);
HXLINE(  27)		this->set_visible(this->active);
            	}



hx::ObjectPtr< Door_obj > Door_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String map,int posX,int posY) {
	hx::ObjectPtr< Door_obj > __this = new Door_obj();
	__this->__construct(__o_X,__o_Y,map,posX,posY);
	return __this;
}

hx::ObjectPtr< Door_obj > Door_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String map,int posX,int posY) {
	Door_obj *__this = (Door_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Door_obj), true, "Door"));
	*(void **)__this = Door_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,map,posX,posY);
	return __this;
}

Door_obj::Door_obj()
{
}

void Door_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Door);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(posX,"posX");
	HX_MARK_MEMBER_NAME(posY,"posY");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Door_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(posX,"posX");
	HX_VISIT_MEMBER_NAME(posY,"posY");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Door_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"posX") ) { return hx::Val( posX ); }
		if (HX_FIELD_EQ(inName,"posY") ) { return hx::Val( posY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Door_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"posX") ) { posX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"posY") ) { posY=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Door_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"));
	outFields->push(HX_HCSTRING("posX","\x44","\x84","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("posY","\x45","\x84","\x5c","\x4a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Door_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Door_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsString,(int)offsetof(Door_obj,map),HX_HCSTRING("map","\x9c","\x0a","\x53","\x00")},
	{hx::fsInt,(int)offsetof(Door_obj,posX),HX_HCSTRING("posX","\x44","\x84","\x5c","\x4a")},
	{hx::fsInt,(int)offsetof(Door_obj,posY),HX_HCSTRING("posY","\x45","\x84","\x5c","\x4a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Door_obj_sStaticStorageInfo = 0;
#endif

static ::String Door_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("posX","\x44","\x84","\x5c","\x4a"),
	HX_HCSTRING("posY","\x45","\x84","\x5c","\x4a"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Door_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Door_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Door_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Door_obj::__mClass,"__mClass");
};

#endif

hx::Class Door_obj::__mClass;

void Door_obj::__register()
{
	hx::Object *dummy = new Door_obj;
	Door_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Door","\x8e","\x1d","\x47","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Door_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Door_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Door_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Door_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Door_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Door_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

