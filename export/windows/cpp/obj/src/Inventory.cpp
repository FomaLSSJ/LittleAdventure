// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Direction
#include <Direction.h>
#endif
#ifndef INCLUDED_GUI
#include <GUI.h>
#endif
#ifndef INCLUDED_Inventory
#include <Inventory.h>
#endif
#ifndef INCLUDED_Item
#include <Item.h>
#endif
#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_15_new,"Inventory","new",0x5d57e56e,"Inventory.new","Inventory.hx",15,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_19_addItem,"Inventory","addItem",0x2acbbbe2,"Inventory.addItem","Inventory.hx",19,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_45_getItem,"Inventory","getItem",0xc11128d7,"Inventory.getItem","Inventory.hx",45,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_40_getItem,"Inventory","getItem",0xc11128d7,"Inventory.getItem","Inventory.hx",40,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_60_checkItem,"Inventory","checkItem",0x1a8de189,"Inventory.checkItem","Inventory.hx",60,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_55_checkItem,"Inventory","checkItem",0x1a8de189,"Inventory.checkItem","Inventory.hx",55,0xbb8a21c2)
static const bool _hx_array_data_ea89567c_6[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_70_getItemsName,"Inventory","getItemsName",0x6965c027,"Inventory.getItemsName","Inventory.hx",70,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_77_getItemsName,"Inventory","getItemsName",0x6965c027,"Inventory.getItemsName","Inventory.hx",77,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_104_removeItem,"Inventory","removeItem",0x1279c829,"Inventory.removeItem","Inventory.hx",104,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_89_removeItem,"Inventory","removeItem",0x1279c829,"Inventory.removeItem","Inventory.hx",89,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_126_updateItems,"Inventory","updateItems",0xff79e845,"Inventory.updateItems","Inventory.hx",126,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_121_updateItems,"Inventory","updateItems",0xff79e845,"Inventory.updateItems","Inventory.hx",121,0xbb8a21c2)
static const int _hx_array_data_ea89567c_13[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_135_moveSelector,"Inventory","moveSelector",0xc806a482,"Inventory.moveSelector","Inventory.hx",135,0xbb8a21c2)

void Inventory_obj::__construct(hx::Null< int >  __o_MaxSize){
int MaxSize = __o_MaxSize.Default(0);
            	HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_15_new)
HXDLIN(  15)		super::__construct(MaxSize);
            	}

Dynamic Inventory_obj::__CreateEmpty() { return new Inventory_obj; }

void *Inventory_obj::_hx_vtable = 0;

Dynamic Inventory_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Inventory_obj > _hx_result = new Inventory_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Inventory_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x07a02998) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x07a02998;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c;
	}
}

void Inventory_obj::addItem( ::Dynamic item, ::Dynamic __o_Count){
 ::Dynamic Count = __o_Count.Default(1);
            	HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_19_addItem)
HXLINE(  20)		 ::Item append = null();
HXLINE(  22)		if ((::Type_obj::getClassName(::Type_obj::getClass(item)) == HX_("String",f1,9c,c4,45))) {
HXLINE(  24)			append = ::Reg_obj::itemsList->get(( (::String)(item) )).StaticCast<  ::Item >();
            		}
            		else {
HXLINE(  28)			append = ( ( ::Item)(item) );
            		}
HXLINE(  31)		bool _hx_tmp;
HXDLIN(  31)		if (this->checkItem(append->name)) {
HXLINE(  31)			_hx_tmp = append->multiple;
            		}
            		else {
HXLINE(  31)			_hx_tmp = false;
            		}
HXDLIN(  31)		if (_hx_tmp) {
HXLINE(  33)			 ::Item append1 = append;
HXDLIN(  33)			append1->count = (append1->count + Count);
            		}
HXLINE(  36)		this->add(append);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Inventory_obj,addItem,(void))

 ::Dynamic Inventory_obj::getItem(::String name){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,name,::Array< ::Dynamic>,object) HXARGC(1)
            		void _hx_run( ::Item item){
            			HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_45_getItem)
HXLINE(  45)			if ((item->name == name)) {
HXLINE(  47)				object[(int)0] = item;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_40_getItem)
HXLINE(  41)		::Array< ::Dynamic> object = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(  43)		this->forEach( ::Dynamic(new _hx_Closure_0(name,object)),null());
HXLINE(  51)		return object->__get((int)0).StaticCast<  ::Item >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Inventory_obj,getItem,return )

bool Inventory_obj::checkItem(::String name){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,name,::Array< bool >,check) HXARGC(1)
            		void _hx_run( ::Item item){
            			HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_60_checkItem)
HXLINE(  60)			if ((item->name == name)) {
HXLINE(  62)				check[(int)0] = true;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_55_checkItem)
HXLINE(  56)		::Array< bool > check = ::Array_obj< bool >::fromData( _hx_array_data_ea89567c_6,1);
HXLINE(  58)		this->forEach( ::Dynamic(new _hx_Closure_0(name,check)),null());
HXLINE(  66)		return check->__get((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Inventory_obj,checkItem,return )

::String Inventory_obj::getItemsName(){
            	HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_70_getItemsName)
HXLINE(  71)		::Array< ::String > names = ::Array_obj< ::String >::__new();
HXLINE(  73)		if ((this->length > (int)0)) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,names) HXARGC(1)
            			void _hx_run( ::Item item){
            				HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_77_getItemsName)
HXLINE(  77)				names->push(item->name);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  75)			this->forEach( ::Dynamic(new _hx_Closure_0(names)),null());
HXLINE(  80)			return names->join(HX_(", ",74,26,00,00));
            		}
            		else {
HXLINE(  84)			return HX_("None",d8,3e,e3,33);
            		}
HXLINE(  73)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Inventory_obj,getItemsName,return )

void Inventory_obj::removeItem( ::Dynamic name, ::Dynamic __o_Count){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::Inventory,_gthis, ::Dynamic,Count,::String,found) HXARGC(1)
            		void _hx_run( ::Item item1){
            			HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_104_removeItem)
HXLINE( 104)			if ((item1->name == found)) {
HXLINE( 106)				int result = (item1->count - Count);
HXLINE( 108)				if ((result > (int)1)) {
HXLINE( 110)					 ::Item item2 = item1;
HXDLIN( 110)					item2->count = (item2->count - Count);
            				}
            				else {
HXLINE( 114)					_gthis->remove(item1,true).StaticCast<  ::Item >();
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

 ::Dynamic Count = __o_Count.Default(1);
            	HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_89_removeItem)
HXLINE(  88)		 ::Inventory _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  90)		::String found = HX_("",00,00,00,00);
HXLINE(  92)		if ((::Type_obj::getClassName(::Type_obj::getClass(name)) == HX_("Item",33,f1,98,30))) {
HXLINE(  94)			found = ( (::String)(name->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  98)			 ::Item item = ::Reg_obj::itemsList->get(( (::String)(name) )).StaticCast<  ::Item >();
HXLINE(  99)			if (hx::IsNotNull( item )) {
HXLINE(  99)				found = item->name;
            			}
            			else {
HXLINE(  99)				found = ( (::String)(name) );
            			}
            		}
HXLINE( 102)		this->forEach( ::Dynamic(new _hx_Closure_0(_gthis,Count,found)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(Inventory_obj,removeItem,(void))

void Inventory_obj::updateItems(Float offset){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::Array< int >,index,Float,posY) HXARGC(1)
            		void _hx_run( ::Item item){
            			HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_126_updateItems)
HXLINE( 127)			item->set_x((((int)6 + ((int)20 * index->__get((int)0))) + (int)4));
HXLINE( 128)			item->set_y(posY);
HXLINE( 130)			index[(int)0]++;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_121_updateItems)
HXLINE( 122)		::Array< int > index = ::Array_obj< int >::fromData( _hx_array_data_ea89567c_13,1);
HXLINE( 123)		Float posY = ((::flixel::FlxG_obj::height - offset) + (int)32);
HXLINE( 125)		this->forEach( ::Dynamic(new _hx_Closure_0(index,posY)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Inventory_obj,updateItems,(void))

void Inventory_obj::moveSelector( ::Direction direction){
            	HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_135_moveSelector)
HXLINE( 136)		 ::Dynamic select = ::Reg_obj::triggers->get(HX_("select",fc,1a,33,6a));
HXLINE( 138)		if (hx::IsEq( direction,::Direction_obj::LEFT_dyn() )) {
HXLINE( 140)			 ::Dynamic select1 = select;
HXDLIN( 140)			select1->__SetField(HX_("x",78,00,00,00),( ::Dynamic(select1->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) - (int)1),hx::paccDynamic);
HXLINE( 142)			if (hx::IsLess(  ::Dynamic(select->__Field(HX_("x",78,00,00,00),hx::paccDynamic)),(int)0 )) {
HXLINE( 144)				select->__SetField(HX_("x",78,00,00,00),(::Reg_obj::inv->members->get_length() - (int)1),hx::paccDynamic);
            			}
            		}
            		else {
HXLINE( 149)			 ::Dynamic select2 = select;
HXDLIN( 149)			select2->__SetField(HX_("x",78,00,00,00),( ::Dynamic(select2->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) + (int)1),hx::paccDynamic);
HXLINE( 151)			 ::Dynamic select3 =  ::Dynamic(select->__Field(HX_("x",78,00,00,00),hx::paccDynamic));
HXDLIN( 151)			if (hx::IsGreater( select3,(::Reg_obj::inv->length - (int)1) )) {
HXLINE( 153)				select->__SetField(HX_("x",78,00,00,00),(int)0,hx::paccDynamic);
            			}
            		}
HXLINE( 157)		::Reg_obj::triggers->set(HX_("select",fc,1a,33,6a),select);
HXLINE( 158)		::Reg_obj::gui->updateInventory();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Inventory_obj,moveSelector,(void))


hx::ObjectPtr< Inventory_obj > Inventory_obj::__new(hx::Null< int >  __o_MaxSize) {
	hx::ObjectPtr< Inventory_obj > __this = new Inventory_obj();
	__this->__construct(__o_MaxSize);
	return __this;
}

hx::ObjectPtr< Inventory_obj > Inventory_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_MaxSize) {
	Inventory_obj *__this = (Inventory_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Inventory_obj), true, "Inventory"));
	*(void **)__this = Inventory_obj::_hx_vtable;
	__this->__construct(__o_MaxSize);
	return __this;
}

Inventory_obj::Inventory_obj()
{
}

hx::Val Inventory_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"addItem") ) { return hx::Val( addItem_dyn() ); }
		if (HX_FIELD_EQ(inName,"getItem") ) { return hx::Val( getItem_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"checkItem") ) { return hx::Val( checkItem_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"removeItem") ) { return hx::Val( removeItem_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"updateItems") ) { return hx::Val( updateItems_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getItemsName") ) { return hx::Val( getItemsName_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveSelector") ) { return hx::Val( moveSelector_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Inventory_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Inventory_obj_sStaticStorageInfo = 0;
#endif

static ::String Inventory_obj_sMemberFields[] = {
	HX_HCSTRING("addItem","\xd4","\x07","\xfd","\x81"),
	HX_HCSTRING("getItem","\xc9","\x74","\x42","\x18"),
	HX_HCSTRING("checkItem","\xfb","\x8d","\x9f","\x99"),
	HX_HCSTRING("getItemsName","\xf5","\xe6","\x01","\xe7"),
	HX_HCSTRING("removeItem","\x77","\xff","\xde","\xc2"),
	HX_HCSTRING("updateItems","\x37","\x15","\xa5","\xa7"),
	HX_HCSTRING("moveSelector","\x50","\xcb","\xa2","\x45"),
	::String(null()) };

static void Inventory_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Inventory_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Inventory_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Inventory_obj::__mClass,"__mClass");
};

#endif

hx::Class Inventory_obj::__mClass;

void Inventory_obj::__register()
{
	hx::Object *dummy = new Inventory_obj;
	Inventory_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Inventory","\x7c","\x56","\x89","\xea");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Inventory_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Inventory_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Inventory_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Inventory_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Inventory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Inventory_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

