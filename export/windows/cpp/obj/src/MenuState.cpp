// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_Request
#include <Request.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTextField
#include <flixel/addons/text/FlxTextField.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1f119275e66a7b90_18_new,"MenuState","new",0xe563b1c4,"MenuState.new","MenuState.hx",18,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_32_create,"MenuState","create",0xe57b7c18,"MenuState.create","MenuState.hx",32,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_86_destroy,"MenuState","destroy",0xf9ac905e,"MenuState.destroy","MenuState.hx",86,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_90_update,"MenuState","update",0xf0719b25,"MenuState.update","MenuState.hx",90,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_110_onPlay,"MenuState","onPlay",0x56504bcf,"MenuState.onPlay","MenuState.hx",110,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_120_onRequest,"MenuState","onRequest",0x52409c54,"MenuState.onRequest","MenuState.hx",120,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_114_onRequest,"MenuState","onRequest",0x52409c54,"MenuState.onRequest","MenuState.hx",114,0xdfbcb22c)

void MenuState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_18_new)
HXDLIN(  18)		super::__construct(MaxSize);
            	}

Dynamic MenuState_obj::__CreateEmpty() { return new MenuState_obj; }

void *MenuState_obj::_hx_vtable = 0;

Dynamic MenuState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MenuState_obj > _hx_result = new MenuState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x17fb3926) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17fb3926;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void MenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_32_create)
HXLINE(  33)		this->super::create();
HXLINE(  53)		::Reg_obj::server = HX_("https://nodejs-api-fomalssj.c9users.io",ef,02,de,c4);
HXLINE(  55)		this->statusMessage =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)10,(int)10,(::flixel::FlxG_obj::width - (int)20),HX_("",00,00,00,00),null(),null());
HXLINE(  57)		this->labelName =  ::flixel::addons::text::FlxTextField_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)64,HX_("Username",36,42,9d,fa),null(),null());
HXLINE(  58)		 ::flixel::addons::text::FlxTextField _hx_tmp = this->labelName;
HXDLIN(  58)		int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  58)		_hx_tmp->set_x(((Float)(_hx_tmp1 - this->labelName->get_width()) / (Float)(int)10));
HXLINE(  59)		 ::flixel::addons::text::FlxTextField _hx_tmp2 = this->labelName;
HXDLIN(  59)		_hx_tmp2->set_y((::flixel::FlxG_obj::height - (int)64));
HXLINE(  60)		this->inputName =  ::flixel::addons::ui::FlxInputText_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)128,null(),null(),null(),null(),null());
HXLINE(  61)		 ::flixel::addons::ui::FlxInputText _hx_tmp3 = this->inputName;
HXDLIN(  61)		Float _hx_tmp4 = this->labelName->x;
HXDLIN(  61)		_hx_tmp3->set_x(((_hx_tmp4 + this->labelName->get_width()) + (int)24));
HXLINE(  62)		 ::flixel::addons::ui::FlxInputText _hx_tmp5 = this->inputName;
HXDLIN(  62)		_hx_tmp5->set_y((::flixel::FlxG_obj::height - (int)64));
HXLINE(  64)		this->labelPass =  ::flixel::addons::text::FlxTextField_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)64,HX_("Password",3b,df,81,22),null(),null());
HXLINE(  65)		 ::flixel::addons::text::FlxTextField _hx_tmp6 = this->labelPass;
HXDLIN(  65)		Float _hx_tmp7 = this->inputName->x;
HXDLIN(  65)		_hx_tmp6->set_x(((_hx_tmp7 + this->inputName->get_width()) + (int)64));
HXLINE(  66)		 ::flixel::addons::text::FlxTextField _hx_tmp8 = this->labelPass;
HXDLIN(  66)		_hx_tmp8->set_y((::flixel::FlxG_obj::height - (int)64));
HXLINE(  67)		this->inputPass =  ::flixel::addons::ui::FlxInputText_obj::__alloc( HX_CTX ,(int)10,(int)140,(int)128,null(),null(),null(),null(),null());
HXLINE(  68)		 ::flixel::addons::ui::FlxInputText _hx_tmp9 = this->inputPass;
HXDLIN(  68)		Float _hx_tmp10 = this->labelPass->x;
HXDLIN(  68)		_hx_tmp9->set_x(((_hx_tmp10 + this->labelPass->get_width()) + (int)24));
HXLINE(  69)		 ::flixel::addons::ui::FlxInputText _hx_tmp11 = this->inputPass;
HXDLIN(  69)		_hx_tmp11->set_y((::flixel::FlxG_obj::height - (int)64));
HXLINE(  70)		this->inputPass->set_passwordMode(true);
HXLINE(  72)		this->requestButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(int)0,(int)0,HX_("Login",49,49,21,0c),this->onRequest_dyn());
HXLINE(  73)		 ::flixel::ui::FlxButton _hx_tmp12 = this->requestButton;
HXDLIN(  73)		int _hx_tmp13 = ::flixel::FlxG_obj::width;
HXDLIN(  73)		_hx_tmp12->set_x(((Float)(_hx_tmp13 - this->requestButton->get_width()) / (Float)(int)2));
HXLINE(  74)		 ::flixel::ui::FlxButton _hx_tmp14 = this->requestButton;
HXDLIN(  74)		_hx_tmp14->set_y((::flixel::FlxG_obj::height - (int)32));
HXLINE(  76)		this->add(this->labelName);
HXLINE(  77)		this->add(this->inputName);
HXLINE(  78)		this->add(this->labelPass);
HXLINE(  79)		this->add(this->inputPass);
HXLINE(  80)		this->add(this->statusMessage);
HXLINE(  81)		this->add(this->requestButton);
            	}


void MenuState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_86_destroy)
HXDLIN(  86)		this->super::destroy();
            	}


void MenuState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_90_update)
HXLINE(  91)		this->super::update(elapsed);
HXLINE(  93)		if (hx::IsNotNull( ::Reg_obj::request->timerStart )) {
HXLINE(  95)			if ((::Reg_obj::request->timerElapsed <= (int)0)) {
HXLINE(  97)				{
HXLINE(  97)					 ::flixel::text::FlxText _g = this->statusMessage;
HXDLIN(  97)					_g->set_text((_g->text + HX_(".",2e,00,00,00)));
            				}
HXLINE(  98)				::Reg_obj::request->timerElapsed = (int)1;
            			}
HXLINE( 101)			::Reg_obj::request->timerElapsed = (::Reg_obj::request->timerElapsed - ::Reg_obj::request->timerStart->_timeCounter);
            		}
            	}


void MenuState_obj::onPlay(){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_110_onPlay)
HXDLIN( 110)		 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN( 110)		if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXDLIN( 110)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuState_obj,onPlay,(void))

void MenuState_obj::onRequest(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_120_onRequest)
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_114_onRequest)
HXLINE( 115)		if (::Reg_obj::debugger) {
HXLINE( 117)			this->onPlay();
HXLINE( 118)			return;
            		}
HXLINE( 120)		::Reg_obj::request->login(this->inputName->text,this->inputPass->text,this->statusMessage, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuState_obj,onRequest,(void))


hx::ObjectPtr< MenuState_obj > MenuState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< MenuState_obj > __this = new MenuState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< MenuState_obj > MenuState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	MenuState_obj *__this = (MenuState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MenuState_obj), true, "MenuState"));
	*(void **)__this = MenuState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

MenuState_obj::MenuState_obj()
{
}

void MenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuState);
	HX_MARK_MEMBER_NAME(statusMessage,"statusMessage");
	HX_MARK_MEMBER_NAME(labelName,"labelName");
	HX_MARK_MEMBER_NAME(inputName,"inputName");
	HX_MARK_MEMBER_NAME(labelPass,"labelPass");
	HX_MARK_MEMBER_NAME(inputPass,"inputPass");
	HX_MARK_MEMBER_NAME(requestButton,"requestButton");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(statusMessage,"statusMessage");
	HX_VISIT_MEMBER_NAME(labelName,"labelName");
	HX_VISIT_MEMBER_NAME(inputName,"inputName");
	HX_VISIT_MEMBER_NAME(labelPass,"labelPass");
	HX_VISIT_MEMBER_NAME(inputPass,"inputPass");
	HX_VISIT_MEMBER_NAME(requestButton,"requestButton");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MenuState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"onPlay") ) { return hx::Val( onPlay_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"labelName") ) { return hx::Val( labelName ); }
		if (HX_FIELD_EQ(inName,"inputName") ) { return hx::Val( inputName ); }
		if (HX_FIELD_EQ(inName,"labelPass") ) { return hx::Val( labelPass ); }
		if (HX_FIELD_EQ(inName,"inputPass") ) { return hx::Val( inputPass ); }
		if (HX_FIELD_EQ(inName,"onRequest") ) { return hx::Val( onRequest_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"statusMessage") ) { return hx::Val( statusMessage ); }
		if (HX_FIELD_EQ(inName,"requestButton") ) { return hx::Val( requestButton ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MenuState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"labelName") ) { labelName=inValue.Cast<  ::flixel::addons::text::FlxTextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputName") ) { inputName=inValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"labelPass") ) { labelPass=inValue.Cast<  ::flixel::addons::text::FlxTextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputPass") ) { inputPass=inValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"statusMessage") ) { statusMessage=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"requestButton") ) { requestButton=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("statusMessage","\xb5","\xa0","\x9b","\x97"));
	outFields->push(HX_HCSTRING("labelName","\x5f","\xb6","\x57","\x5a"));
	outFields->push(HX_HCSTRING("inputName","\x75","\x2f","\x2a","\x10"));
	outFields->push(HX_HCSTRING("labelPass","\xe5","\x28","\xaa","\x5b"));
	outFields->push(HX_HCSTRING("inputPass","\xfb","\xa1","\x7c","\x11"));
	outFields->push(HX_HCSTRING("requestButton","\xa1","\x9a","\x8a","\x95"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MenuState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(MenuState_obj,statusMessage),HX_HCSTRING("statusMessage","\xb5","\xa0","\x9b","\x97")},
	{hx::fsObject /*::flixel::addons::text::FlxTextField*/ ,(int)offsetof(MenuState_obj,labelName),HX_HCSTRING("labelName","\x5f","\xb6","\x57","\x5a")},
	{hx::fsObject /*::flixel::addons::ui::FlxInputText*/ ,(int)offsetof(MenuState_obj,inputName),HX_HCSTRING("inputName","\x75","\x2f","\x2a","\x10")},
	{hx::fsObject /*::flixel::addons::text::FlxTextField*/ ,(int)offsetof(MenuState_obj,labelPass),HX_HCSTRING("labelPass","\xe5","\x28","\xaa","\x5b")},
	{hx::fsObject /*::flixel::addons::ui::FlxInputText*/ ,(int)offsetof(MenuState_obj,inputPass),HX_HCSTRING("inputPass","\xfb","\xa1","\x7c","\x11")},
	{hx::fsObject /*::flixel::ui::FlxButton*/ ,(int)offsetof(MenuState_obj,requestButton),HX_HCSTRING("requestButton","\xa1","\x9a","\x8a","\x95")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String MenuState_obj_sMemberFields[] = {
	HX_HCSTRING("statusMessage","\xb5","\xa0","\x9b","\x97"),
	HX_HCSTRING("labelName","\x5f","\xb6","\x57","\x5a"),
	HX_HCSTRING("inputName","\x75","\x2f","\x2a","\x10"),
	HX_HCSTRING("labelPass","\xe5","\x28","\xaa","\x5b"),
	HX_HCSTRING("inputPass","\xfb","\xa1","\x7c","\x11"),
	HX_HCSTRING("requestButton","\xa1","\x9a","\x8a","\x95"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("onPlay","\xb3","\x36","\xe4","\xec"),
	HX_HCSTRING("onRequest","\xf0","\x97","\x2f","\x1c"),
	::String(null()) };

static void MenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuState_obj::__mClass,"__mClass");
};

#endif

hx::Class MenuState_obj::__mClass;

void MenuState_obj::__register()
{
	hx::Object *dummy = new MenuState_obj;
	MenuState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("MenuState","\xd2","\xbf","\xb6","\xc0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MenuState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MenuState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

