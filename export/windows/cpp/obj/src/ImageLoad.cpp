// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_ImageLoad
#include <ImageLoad.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Loader
#include <openfl/_legacy/display/Loader.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_LoaderInfo
#include <openfl/_legacy/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLLoader
#include <openfl/_legacy/net/URLLoader.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLRequest
#include <openfl/_legacy/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_system_LoaderContext
#include <openfl/system/LoaderContext.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a39a35eb2e4fa455_21_new,"ImageLoad","new",0xcc14c473,"ImageLoad.new","ImageLoad.hx",21,0xc0a0ca5d)
HX_DEFINE_STACK_FRAME(_hx_pos_a39a35eb2e4fa455_16_new,"ImageLoad","new",0xcc14c473,"ImageLoad.new","ImageLoad.hx",16,0xc0a0ca5d)

void ImageLoad_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic, ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::ImageLoad,_gthis, ::Dynamic,callback) HXARGC(1)
            		void _hx_run( ::openfl::_legacy::events::Event e){
            			HX_GC_STACKFRAME(&_hx_pos_a39a35eb2e4fa455_21_new)
HXLINE(  22)			_gthis->bitmapData = ( ( ::openfl::_legacy::display::BitmapData)( ::Dynamic(e->get_target()->__Field(HX_("content",39,8d,77,19),hx::paccDynamic))->__Field(HX_("bitmapData",b9,b5,c0,33),hx::paccDynamic)) );
HXLINE(  23)			_gthis->loadGraphic(_gthis->bitmapData,null(),null(),null(),null(),null());
HXLINE(  25)			callback();
            		}
            		HX_END_LOCAL_FUNC1((void))

Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_a39a35eb2e4fa455_16_new)
HXLINE(  15)		 ::ImageLoad _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  17)		super::__construct(X,Y,null());
HXLINE(  19)		this->loader =  ::openfl::_legacy::display::Loader_obj::__alloc( HX_CTX );
HXLINE(  20)		this->loader->contentLoaderInfo->addEventListener(::openfl::_legacy::events::Event_obj::COMPLETE, ::Dynamic(new _hx_Closure_0(_gthis,callback)),null(),null(),null());
HXLINE(  27)		 ::openfl::_legacy::display::Loader _hx_tmp = this->loader;
HXDLIN(  27)		_hx_tmp->load( ::openfl::_legacy::net::URLRequest_obj::__alloc( HX_CTX ,SimpleGraphic),null());
            	}

Dynamic ImageLoad_obj::__CreateEmpty() { return new ImageLoad_obj; }

void *ImageLoad_obj::_hx_vtable = 0;

Dynamic ImageLoad_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageLoad_obj > _hx_result = new ImageLoad_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool ImageLoad_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b6ffd77) {
		if (inClassId<=(int)0x05ecb539) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x05ecb539;
		} else {
			return inClassId==(int)0x0b6ffd77;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}


hx::ObjectPtr< ImageLoad_obj > ImageLoad_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic, ::Dynamic callback) {
	hx::ObjectPtr< ImageLoad_obj > __this = new ImageLoad_obj();
	__this->__construct(__o_X,__o_Y,SimpleGraphic,callback);
	return __this;
}

hx::ObjectPtr< ImageLoad_obj > ImageLoad_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic, ::Dynamic callback) {
	ImageLoad_obj *__this = (ImageLoad_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ImageLoad_obj), true, "ImageLoad"));
	*(void **)__this = ImageLoad_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,SimpleGraphic,callback);
	return __this;
}

ImageLoad_obj::ImageLoad_obj()
{
}

void ImageLoad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ImageLoad);
	HX_MARK_MEMBER_NAME(loader,"loader");
	HX_MARK_MEMBER_NAME(bitmapData,"bitmapData");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ImageLoad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(loader,"loader");
	HX_VISIT_MEMBER_NAME(bitmapData,"bitmapData");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ImageLoad_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"loader") ) { return hx::Val( loader ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapData") ) { return hx::Val( bitmapData ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ImageLoad_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"loader") ) { loader=inValue.Cast<  ::openfl::_legacy::display::Loader >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapData") ) { bitmapData=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ImageLoad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("loader","\x13","\x48","\x6f","\x58"));
	outFields->push(HX_HCSTRING("bitmapData","\xb9","\xb5","\xc0","\x33"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ImageLoad_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_legacy::display::Loader*/ ,(int)offsetof(ImageLoad_obj,loader),HX_HCSTRING("loader","\x13","\x48","\x6f","\x58")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(ImageLoad_obj,bitmapData),HX_HCSTRING("bitmapData","\xb9","\xb5","\xc0","\x33")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ImageLoad_obj_sStaticStorageInfo = 0;
#endif

static ::String ImageLoad_obj_sMemberFields[] = {
	HX_HCSTRING("loader","\x13","\x48","\x6f","\x58"),
	HX_HCSTRING("bitmapData","\xb9","\xb5","\xc0","\x33"),
	::String(null()) };

static void ImageLoad_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageLoad_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageLoad_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageLoad_obj::__mClass,"__mClass");
};

#endif

hx::Class ImageLoad_obj::__mClass;

void ImageLoad_obj::__register()
{
	hx::Object *dummy = new ImageLoad_obj;
	ImageLoad_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ImageLoad","\x01","\x0f","\xbf","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ImageLoad_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ImageLoad_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ImageLoad_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageLoad_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageLoad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageLoad_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

