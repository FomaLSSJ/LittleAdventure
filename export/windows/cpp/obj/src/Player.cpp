// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Direction
#include <Direction.h>
#endif
#ifndef INCLUDED_GUI
#include <GUI.h>
#endif
#ifndef INCLUDED_Inventory
#include <Inventory.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_22_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",22,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_1[] = {
	(int)0,
};
static const int _hx_array_data_6c4d5f81_2[] = {
	(int)3,
};
static const int _hx_array_data_6c4d5f81_3[] = {
	(int)6,
};
static const int _hx_array_data_6c4d5f81_4[] = {
	(int)9,
};
static const int _hx_array_data_6c4d5f81_5[] = {
	(int)1,(int)2,
};
static const int _hx_array_data_6c4d5f81_6[] = {
	(int)4,(int)5,
};
static const int _hx_array_data_6c4d5f81_7[] = {
	(int)7,(int)8,
};
static const int _hx_array_data_6c4d5f81_8[] = {
	(int)10,(int)11,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_50_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",50,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_71_use,"Player","use",0x8d5ab0da,"Player.use","Player.hx",71,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_85_inventory,"Player","inventory",0xfe862b6f,"Player.inventory","Player.hx",85,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_103_movement,"Player","movement",0x91ad8bbc,"Player.movement","Player.hx",103,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_144_moveTo,"Player","moveTo",0x37a02c39,"Player.moveTo","Player.hx",144,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_165_collideCharacters,"Player","collideCharacters",0xa409d59b,"Player.collideCharacters","Player.hx",165,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_170_checkCharacters,"Player","checkCharacters",0xa7e754a5,"Player.checkCharacters","Player.hx",170,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_185_checkNextTile,"Player","checkNextTile",0xc869e8fc,"Player.checkNextTile","Player.hx",185,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_207_getDirection,"Player","getDirection",0x3b07cfd6,"Player.getDirection","Player.hx",207,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_12_boot,"Player","boot",0x156e003f,"Player.boot","Player.hx",12,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_13_boot,"Player","boot",0x156e003f,"Player.boot","Player.hx",13,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_14_boot,"Player","boot",0x156e003f,"Player.boot","Player.hx",14,0xa27fc9dd)

void Player_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_22_new)
HXLINE(  23)		super::__construct(X,Y,null());
HXLINE(  25)		this->set_facing((int)4096);
HXLINE(  27)		if (( (bool)(SimpleGraphic) )) {
HXLINE(  29)			this->loadGraphic(SimpleGraphic,true,(int)16,(int)16,null(),null());
HXLINE(  31)			this->animation->add(HX_("DOWN_IDLE",51,27,d8,e3),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_1,1),null(),null(),null(),null());
HXLINE(  32)			this->animation->add(HX_("UP_IDLE",b8,d6,b2,ae),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_2,1),null(),null(),null(),null());
HXLINE(  33)			this->animation->add(HX_("LEFT_IDLE",8c,41,a2,e2),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_3,1),null(),null(),null(),null());
HXLINE(  34)			this->animation->add(HX_("RIGHT_IDLE",b7,3d,38,c7),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_4,1),null(),null(),null(),null());
HXLINE(  36)			this->animation->add(HX_("DOWN_WALK",46,dd,16,ed),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_5,2),(int)2,null(),null(),null());
HXLINE(  37)			this->animation->add(HX_("UP_WALK",ad,8c,f1,b7),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_6,2),(int)2,null(),null(),null());
HXLINE(  38)			this->animation->add(HX_("LEFT_WALK",81,f7,e0,eb),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_7,2),(int)2,null(),null(),null());
HXLINE(  39)			this->animation->add(HX_("RIGHT_WALK",ac,f3,76,d0),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_8,2),(int)2,null(),null(),null());
HXLINE(  41)			this->animation->play(HX_("DOWN_WALK",46,dd,16,ed),null(),null(),null());
            		}
            		else {
HXLINE(  45)			this->makeGraphic((int)16,(int)16,(int)-16776961,null(),null());
            		}
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x6c4d5f81;
	}
}

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_50_update)
HXLINE(  51)		this->super::update(elapsed);
HXLINE(  53)		if (!(::Reg_obj::gui->isActive())) {
HXLINE(  55)			this->movement();
            		}
HXLINE(  58)		if (!(( (bool)(::Reg_obj::triggers->get(HX_("is_inventory",c7,16,c7,7f))) ))) {
HXLINE(  60)			this->use();
            		}
HXLINE(  63)		bool _hx_tmp;
HXDLIN(  63)		if (!(( (bool)(::Reg_obj::triggers->get(HX_("is_dialog",bd,6b,57,56))) ))) {
HXLINE(  63)			_hx_tmp = !(this->moveToNextTile);
            		}
            		else {
HXLINE(  63)			_hx_tmp = false;
            		}
HXDLIN(  63)		if (_hx_tmp) {
HXLINE(  65)			this->inventory();
            		}
            	}


void Player_obj::use(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_71_use)
HXDLIN(  71)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN(  71)		int KeyArray;
HXDLIN(  71)		::String s = HX_("SPACE",a6,c4,54,ff);
HXDLIN(  71)		s = s.toUpperCase();
HXDLIN(  71)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXDLIN(  71)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXDLIN(  71)			KeyArray = (int)-1;
            		}
HXDLIN(  71)		::String s1 = HX_("Z",5a,00,00,00);
HXDLIN(  71)		s1 = s1.toUpperCase();
HXDLIN(  71)		int KeyArray1;
HXDLIN(  71)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXDLIN(  71)			KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            		}
            		else {
HXDLIN(  71)			KeyArray1 = (int)-1;
            		}
HXDLIN(  71)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray)->init(1,KeyArray1),(int)2)) {
HXLINE(  73)			if (!(::Reg_obj::gui->isActive())) {
HXLINE(  75)				this->checkCharacters();
            			}
            			else {
HXLINE(  79)				this->executeCharacter->startDialog();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,use,(void))

void Player_obj::inventory(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_85_inventory)
HXLINE(  86)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  86)		if (_this->keyManager->checkStatus((int)88,_this->status)) {
HXLINE(  88)			::Reg_obj::gui->toggleInventory();
            		}
HXLINE(  91)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  91)		if (_this1->keyManager->checkStatus((int)39,_this1->status)) {
HXLINE(  93)			::Reg_obj::inv->moveSelector(::Direction_obj::RIGHT_dyn());
            		}
HXLINE(  96)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  96)		if (_this2->keyManager->checkStatus((int)37,_this2->status)) {
HXLINE(  98)			::Reg_obj::inv->moveSelector(::Direction_obj::LEFT_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,inventory,(void))

void Player_obj::movement(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_103_movement)
HXLINE( 104)		if (this->moveToNextTile) {
HXLINE( 106)			int _g = this->facing;
HXDLIN( 106)			switch((int)(_g)){
            				case (int)1: {
HXLINE( 113)					 ::Player _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 113)					_g1->set_x((_g1->x - (int)1));
            				}
            				break;
            				case (int)16: {
HXLINE( 115)					 ::Player _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 115)					_g2->set_x((_g2->x + (int)1));
            				}
            				break;
            				case (int)256: {
HXLINE( 109)					 ::Player _g3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 109)					_g3->set_y((_g3->y - (int)1));
            				}
            				break;
            				case (int)4096: {
HXLINE( 111)					 ::Player _g4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 111)					_g4->set_y((_g4->y + (int)1));
            				}
            				break;
            			}
            		}
HXLINE( 119)		bool _hx_tmp;
HXDLIN( 119)		if ((hx::Mod(this->x,(int)16) == (int)0)) {
HXLINE( 119)			_hx_tmp = (hx::Mod(this->y,(int)16) == (int)0);
            		}
            		else {
HXLINE( 119)			_hx_tmp = false;
            		}
HXDLIN( 119)		if (_hx_tmp) {
HXLINE( 121)			this->moveToNextTile = false;
            		}
HXLINE( 124)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 124)		int KeyArray;
HXDLIN( 124)		::String s = HX_("UP",5b,4a,00,00);
HXDLIN( 124)		s = s.toUpperCase();
HXDLIN( 124)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 124)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE( 124)			KeyArray = (int)-1;
            		}
HXDLIN( 124)		::String s1 = HX_("W",57,00,00,00);
HXDLIN( 124)		s1 = s1.toUpperCase();
HXDLIN( 124)		int KeyArray1;
HXDLIN( 124)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 124)			KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            		}
            		else {
HXLINE( 124)			KeyArray1 = (int)-1;
            		}
HXDLIN( 124)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray)->init(1,KeyArray1),(int)1)) {
HXLINE( 126)			this->moveTo((int)256);
            		}
            		else {
HXLINE( 128)			 ::flixel::input::keyboard::FlxKeyboard _this1 = ::flixel::FlxG_obj::keys;
HXDLIN( 128)			int KeyArray2;
HXDLIN( 128)			::String s2 = HX_("DOWN",62,c0,2e,2d);
HXDLIN( 128)			s2 = s2.toUpperCase();
HXDLIN( 128)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE( 128)				KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            			}
            			else {
HXLINE( 128)				KeyArray2 = (int)-1;
            			}
HXDLIN( 128)			::String s3 = HX_("S",53,00,00,00);
HXDLIN( 128)			s3 = s3.toUpperCase();
HXDLIN( 128)			int KeyArray3;
HXDLIN( 128)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) {
HXLINE( 128)				KeyArray3 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) );
            			}
            			else {
HXLINE( 128)				KeyArray3 = (int)-1;
            			}
HXDLIN( 128)			if (_this1->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray2)->init(1,KeyArray3),(int)1)) {
HXLINE( 130)				this->moveTo((int)4096);
            			}
            			else {
HXLINE( 132)				 ::flixel::input::keyboard::FlxKeyboard _this2 = ::flixel::FlxG_obj::keys;
HXDLIN( 132)				int KeyArray4;
HXDLIN( 132)				::String s4 = HX_("LEFT",07,d0,70,32);
HXDLIN( 132)				s4 = s4.toUpperCase();
HXDLIN( 132)				if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s4)) {
HXLINE( 132)					KeyArray4 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s4)) );
            				}
            				else {
HXLINE( 132)					KeyArray4 = (int)-1;
            				}
HXDLIN( 132)				::String s5 = HX_("A",41,00,00,00);
HXDLIN( 132)				s5 = s5.toUpperCase();
HXDLIN( 132)				int KeyArray5;
HXDLIN( 132)				if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s5)) {
HXLINE( 132)					KeyArray5 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s5)) );
            				}
            				else {
HXLINE( 132)					KeyArray5 = (int)-1;
            				}
HXDLIN( 132)				if (_this2->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray4)->init(1,KeyArray5),(int)1)) {
HXLINE( 134)					this->moveTo((int)1);
            				}
            				else {
HXLINE( 136)					 ::flixel::input::keyboard::FlxKeyboard _this3 = ::flixel::FlxG_obj::keys;
HXDLIN( 136)					int KeyArray6;
HXDLIN( 136)					::String s6 = HX_("RIGHT",bc,43,52,67);
HXDLIN( 136)					s6 = s6.toUpperCase();
HXDLIN( 136)					if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s6)) {
HXLINE( 136)						KeyArray6 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s6)) );
            					}
            					else {
HXLINE( 136)						KeyArray6 = (int)-1;
            					}
HXDLIN( 136)					::String s7 = HX_("D",44,00,00,00);
HXDLIN( 136)					s7 = s7.toUpperCase();
HXDLIN( 136)					int KeyArray7;
HXDLIN( 136)					if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s7)) {
HXLINE( 136)						KeyArray7 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s7)) );
            					}
            					else {
HXLINE( 136)						KeyArray7 = (int)-1;
            					}
HXDLIN( 136)					if (_this3->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray6)->init(1,KeyArray7),(int)1)) {
HXLINE( 138)						this->moveTo((int)16);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,movement,(void))

void Player_obj::moveTo(int direction){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_144_moveTo)
HXDLIN( 144)		if (!(this->moveToNextTile)) {
HXLINE( 146)			this->set_facing(direction);
HXLINE( 147)			this->moveToNextTile = true;
HXLINE( 148)			this->moveToDoor = false;
HXLINE( 149)			{
HXLINE( 149)				int _g = this->facing;
HXDLIN( 149)				switch((int)(_g)){
            					case (int)1: {
HXLINE( 156)						this->animation->play(HX_("LEFT_WALK",81,f7,e0,eb),null(),null(),null());
            					}
            					break;
            					case (int)16: {
HXLINE( 158)						this->animation->play(HX_("RIGHT_WALK",ac,f3,76,d0),null(),null(),null());
            					}
            					break;
            					case (int)256: {
HXLINE( 152)						this->animation->play(HX_("UP_WALK",ad,8c,f1,b7),null(),null(),null());
            					}
            					break;
            					case (int)4096: {
HXLINE( 154)						this->animation->play(HX_("DOWN_WALK",46,dd,16,ed),null(),null(),null());
            					}
            					break;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,moveTo,(void))

void Player_obj::collideCharacters( ::Player p, ::Character c){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_165_collideCharacters)
HXDLIN( 165)		p->moveToNextTile = false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Player_obj,collideCharacters,(void))

void Player_obj::checkCharacters(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_170_checkCharacters)
HXDLIN( 170)		 ::Dynamic character = ::Reg_obj::charactersMap->iterator();
HXDLIN( 170)		while(( (bool)(character->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 170)			 ::Character character1 = ( ( ::Character)(character->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 172)			 ::flixel::math::FlxPoint nextTile = this->checkNextTile();
HXLINE( 174)			bool _hx_tmp;
HXDLIN( 174)			if ((character1->x == nextTile->x)) {
HXLINE( 174)				_hx_tmp = (character1->y == nextTile->y);
            			}
            			else {
HXLINE( 174)				_hx_tmp = false;
            			}
HXDLIN( 174)			if (_hx_tmp) {
HXLINE( 176)				this->executeCharacter = character1;
HXLINE( 177)				this->executeCharacter->execute(hx::ObjectPtr<OBJ_>(this));
HXLINE( 179)				this->executeCharacter->startDialog();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,checkCharacters,(void))

 ::flixel::math::FlxPoint Player_obj::checkNextTile(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_185_checkNextTile)
HXLINE( 186)		 ::flixel::math::FlxPoint next =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 187)		next->set_x(this->x);
HXLINE( 188)		next->set_y(this->y);
HXLINE( 190)		{
HXLINE( 190)			int _g = this->facing;
HXDLIN( 190)			switch((int)(_g)){
            				case (int)1: {
HXLINE( 197)					 ::flixel::math::FlxPoint _g1 = next;
HXDLIN( 197)					_g1->set_x((_g1->x - (int)16));
            				}
            				break;
            				case (int)16: {
HXLINE( 199)					 ::flixel::math::FlxPoint _g2 = next;
HXDLIN( 199)					_g2->set_x((_g2->x + (int)16));
            				}
            				break;
            				case (int)256: {
HXLINE( 193)					 ::flixel::math::FlxPoint _g3 = next;
HXDLIN( 193)					_g3->set_y((_g3->y - (int)16));
            				}
            				break;
            				case (int)4096: {
HXLINE( 195)					 ::flixel::math::FlxPoint _g4 = next;
HXDLIN( 195)					_g4->set_y((_g4->y + (int)16));
            				}
            				break;
            			}
            		}
HXLINE( 202)		return next;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,checkNextTile,return )

int Player_obj::getDirection(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_207_getDirection)
HXDLIN( 207)		return this->facing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,getDirection,return )

int Player_obj::TILE_SIZE;

int Player_obj::MOVEMENT_SPEED;

int Player_obj::ANIMATION_SPEED;


hx::ObjectPtr< Player_obj > Player_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic) {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(moveToNextTile,"moveToNextTile");
	HX_MARK_MEMBER_NAME(moveToDoor,"moveToDoor");
	HX_MARK_MEMBER_NAME(executeCharacter,"executeCharacter");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(moveToNextTile,"moveToNextTile");
	HX_VISIT_MEMBER_NAME(moveToDoor,"moveToDoor");
	HX_VISIT_MEMBER_NAME(executeCharacter,"executeCharacter");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"use") ) { return hx::Val( use_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return hx::Val( moveTo_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"movement") ) { return hx::Val( movement_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { return hx::Val( inventory_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"moveToDoor") ) { return hx::Val( moveToDoor ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getDirection") ) { return hx::Val( getDirection_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"checkNextTile") ) { return hx::Val( checkNextTile_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"moveToNextTile") ) { return hx::Val( moveToNextTile ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"checkCharacters") ) { return hx::Val( checkCharacters_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"executeCharacter") ) { return hx::Val( executeCharacter ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"collideCharacters") ) { return hx::Val( collideCharacters_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"moveToDoor") ) { moveToDoor=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"moveToNextTile") ) { moveToNextTile=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"executeCharacter") ) { executeCharacter=inValue.Cast<  ::Character >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("moveToNextTile","\xcd","\xcc","\xd6","\xa9"));
	outFields->push(HX_HCSTRING("moveToDoor","\x7a","\xd6","\x55","\xc8"));
	outFields->push(HX_HCSTRING("executeCharacter","\xb4","\x42","\x11","\x66"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Player_obj,moveToNextTile),HX_HCSTRING("moveToNextTile","\xcd","\xcc","\xd6","\xa9")},
	{hx::fsBool,(int)offsetof(Player_obj,moveToDoor),HX_HCSTRING("moveToDoor","\x7a","\xd6","\x55","\xc8")},
	{hx::fsObject /*::Character*/ ,(int)offsetof(Player_obj,executeCharacter),HX_HCSTRING("executeCharacter","\xb4","\x42","\x11","\x66")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Player_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Player_obj::TILE_SIZE,HX_HCSTRING("TILE_SIZE","\xb2","\xaa","\xbd","\x5f")},
	{hx::fsInt,(void *) &Player_obj::MOVEMENT_SPEED,HX_HCSTRING("MOVEMENT_SPEED","\x17","\xb9","\xea","\xa5")},
	{hx::fsInt,(void *) &Player_obj::ANIMATION_SPEED,HX_HCSTRING("ANIMATION_SPEED","\x8c","\xb8","\x44","\x14")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("moveToNextTile","\xcd","\xcc","\xd6","\xa9"),
	HX_HCSTRING("moveToDoor","\x7a","\xd6","\x55","\xc8"),
	HX_HCSTRING("executeCharacter","\xb4","\x42","\x11","\x66"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("use","\x47","\x2c","\x59","\x00"),
	HX_HCSTRING("inventory","\x9c","\x76","\xb6","\x48"),
	HX_HCSTRING("movement","\x2f","\x85","\x37","\x00"),
	HX_HCSTRING("moveTo","\xec","\xd2","\xac","\xcc"),
	HX_HCSTRING("collideCharacters","\xc8","\x95","\x6c","\x6c"),
	HX_HCSTRING("checkCharacters","\x92","\xbf","\x27","\xcf"),
	HX_HCSTRING("checkNextTile","\xa9","\xce","\x23","\xe1"),
	HX_HCSTRING("getDirection","\xc9","\xfe","\x96","\x1f"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Player_obj::TILE_SIZE,"TILE_SIZE");
	HX_MARK_MEMBER_NAME(Player_obj::MOVEMENT_SPEED,"MOVEMENT_SPEED");
	HX_MARK_MEMBER_NAME(Player_obj::ANIMATION_SPEED,"ANIMATION_SPEED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Player_obj::TILE_SIZE,"TILE_SIZE");
	HX_VISIT_MEMBER_NAME(Player_obj::MOVEMENT_SPEED,"MOVEMENT_SPEED");
	HX_VISIT_MEMBER_NAME(Player_obj::ANIMATION_SPEED,"ANIMATION_SPEED");
};

#endif

hx::Class Player_obj::__mClass;

static ::String Player_obj_sStaticFields[] = {
	HX_HCSTRING("TILE_SIZE","\xb2","\xaa","\xbd","\x5f"),
	HX_HCSTRING("MOVEMENT_SPEED","\x17","\xb9","\xea","\xa5"),
	HX_HCSTRING("ANIMATION_SPEED","\x8c","\xb8","\x44","\x14"),
	::String(null())
};

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Player_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Player_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_12_boot)
HXDLIN(  12)		TILE_SIZE = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_13_boot)
HXDLIN(  13)		MOVEMENT_SPEED = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_14_boot)
HXDLIN(  14)		ANIMATION_SPEED = (int)2;
            	}
}

