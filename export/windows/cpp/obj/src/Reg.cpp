// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_GUI
#include <GUI.h>
#endif
#ifndef INCLUDED_Helper
#include <Helper.h>
#endif
#ifndef INCLUDED_Inventory
#include <Inventory.h>
#endif
#ifndef INCLUDED_Reg
#include <Reg.h>
#endif
#ifndef INCLUDED_Request
#include <Request.h>
#endif
#ifndef INCLUDED_TiledLevel
#include <TiledLevel.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledMap
#include <flixel/addons/editors/tiled/TiledMap.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_8_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",8,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_10_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",10,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_11_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",11,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_12_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",12,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_13_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",13,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_15_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",15,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_16_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",16,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_17_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",17,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_19_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",19,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_20_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",20,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_21_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",21,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_22_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",22,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_24_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",24,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_26_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",26,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_27_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",27,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_28_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",28,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_30_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",30,0x34f46a0a)
HX_LOCAL_STACK_FRAME(_hx_pos_a9cfc6b082c0c8ed_32_boot,"Reg","boot",0xa66cc5ac,"Reg.boot","Reg.hx",32,0x34f46a0a)

void Reg_obj::__construct() { }

Dynamic Reg_obj::__CreateEmpty() { return new Reg_obj; }

void *Reg_obj::_hx_vtable = 0;

Dynamic Reg_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Reg_obj > _hx_result = new Reg_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Reg_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x003e9134;
}

bool Reg_obj::debugger;

::String Reg_obj::current;

 ::haxe::ds::StringMap Reg_obj::levels;

 ::TiledLevel Reg_obj::level;

 ::haxe::ds::StringMap Reg_obj::charactersMap;

::cpp::VirtualArray Reg_obj::scores;

int Reg_obj::score;

::Array< ::Dynamic> Reg_obj::saves;

::String Reg_obj::server;

 ::Request Reg_obj::request;

::String Reg_obj::name;

::String Reg_obj::image;

 ::GUI Reg_obj::gui;

 ::Inventory Reg_obj::inv;

 ::haxe::ds::StringMap Reg_obj::itemsList;

 ::Helper Reg_obj::helper;

 ::haxe::ds::StringMap Reg_obj::charactersTempData;

 ::haxe::ds::StringMap Reg_obj::triggers;


Reg_obj::Reg_obj()
{
}

bool Reg_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gui") ) { outValue = ( gui ); return true; }
		if (HX_FIELD_EQ(inName,"inv") ) { outValue = ( inv ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { outValue = ( name ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"level") ) { outValue = ( level ); return true; }
		if (HX_FIELD_EQ(inName,"score") ) { outValue = ( score ); return true; }
		if (HX_FIELD_EQ(inName,"saves") ) { outValue = ( saves ); return true; }
		if (HX_FIELD_EQ(inName,"image") ) { outValue = ( image ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"levels") ) { outValue = ( levels ); return true; }
		if (HX_FIELD_EQ(inName,"scores") ) { outValue = ( scores ); return true; }
		if (HX_FIELD_EQ(inName,"server") ) { outValue = ( server ); return true; }
		if (HX_FIELD_EQ(inName,"helper") ) { outValue = ( helper ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { outValue = ( current ); return true; }
		if (HX_FIELD_EQ(inName,"request") ) { outValue = ( request ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"debugger") ) { outValue = ( debugger ); return true; }
		if (HX_FIELD_EQ(inName,"triggers") ) { outValue = ( triggers ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"itemsList") ) { outValue = ( itemsList ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"charactersMap") ) { outValue = ( charactersMap ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"charactersTempData") ) { outValue = ( charactersTempData ); return true; }
	}
	return false;
}

bool Reg_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gui") ) { gui=ioValue.Cast<  ::GUI >(); return true; }
		if (HX_FIELD_EQ(inName,"inv") ) { inv=ioValue.Cast<  ::Inventory >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=ioValue.Cast< ::String >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"level") ) { level=ioValue.Cast<  ::TiledLevel >(); return true; }
		if (HX_FIELD_EQ(inName,"score") ) { score=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"saves") ) { saves=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"image") ) { image=ioValue.Cast< ::String >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"levels") ) { levels=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"scores") ) { scores=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
		if (HX_FIELD_EQ(inName,"server") ) { server=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"helper") ) { helper=ioValue.Cast<  ::Helper >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"request") ) { request=ioValue.Cast<  ::Request >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"debugger") ) { debugger=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"triggers") ) { triggers=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"itemsList") ) { itemsList=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"charactersMap") ) { charactersMap=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"charactersTempData") ) { charactersTempData=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Reg_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Reg_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Reg_obj::debugger,HX_HCSTRING("debugger","\x21","\x24","\xeb","\x90")},
	{hx::fsString,(void *) &Reg_obj::current,HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Reg_obj::levels,HX_HCSTRING("levels","\x6f","\xbe","\x4f","\xa4")},
	{hx::fsObject /*::TiledLevel*/ ,(void *) &Reg_obj::level,HX_HCSTRING("level","\x84","\x15","\x63","\x72")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Reg_obj::charactersMap,HX_HCSTRING("charactersMap","\x12","\xb0","\x51","\x5a")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &Reg_obj::scores,HX_HCSTRING("scores","\xe1","\x74","\x6b","\x45")},
	{hx::fsInt,(void *) &Reg_obj::score,HX_HCSTRING("score","\x52","\x73","\xd9","\x78")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Reg_obj::saves,HX_HCSTRING("saves","\x96","\x4a","\x8c","\x77")},
	{hx::fsString,(void *) &Reg_obj::server,HX_HCSTRING("server","\xc3","\x4a","\x37","\x6e")},
	{hx::fsObject /*::Request*/ ,(void *) &Reg_obj::request,HX_HCSTRING("request","\x4f","\xdf","\x84","\x44")},
	{hx::fsString,(void *) &Reg_obj::name,HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(void *) &Reg_obj::image,HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd")},
	{hx::fsObject /*::GUI*/ ,(void *) &Reg_obj::gui,HX_HCSTRING("gui","\x7b","\x8e","\x4e","\x00")},
	{hx::fsObject /*::Inventory*/ ,(void *) &Reg_obj::inv,HX_HCSTRING("inv","\xf1","\x0c","\x50","\x00")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Reg_obj::itemsList,HX_HCSTRING("itemsList","\x7e","\xf4","\x5e","\xd6")},
	{hx::fsObject /*::Helper*/ ,(void *) &Reg_obj::helper,HX_HCSTRING("helper","\x6e","\x7d","\x4e","\x04")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Reg_obj::charactersTempData,HX_HCSTRING("charactersTempData","\x28","\x2e","\xbf","\x4f")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Reg_obj::triggers,HX_HCSTRING("triggers","\x3b","\x3c","\x8b","\xfd")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Reg_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Reg_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Reg_obj::debugger,"debugger");
	HX_MARK_MEMBER_NAME(Reg_obj::current,"current");
	HX_MARK_MEMBER_NAME(Reg_obj::levels,"levels");
	HX_MARK_MEMBER_NAME(Reg_obj::level,"level");
	HX_MARK_MEMBER_NAME(Reg_obj::charactersMap,"charactersMap");
	HX_MARK_MEMBER_NAME(Reg_obj::scores,"scores");
	HX_MARK_MEMBER_NAME(Reg_obj::score,"score");
	HX_MARK_MEMBER_NAME(Reg_obj::saves,"saves");
	HX_MARK_MEMBER_NAME(Reg_obj::server,"server");
	HX_MARK_MEMBER_NAME(Reg_obj::request,"request");
	HX_MARK_MEMBER_NAME(Reg_obj::name,"name");
	HX_MARK_MEMBER_NAME(Reg_obj::image,"image");
	HX_MARK_MEMBER_NAME(Reg_obj::gui,"gui");
	HX_MARK_MEMBER_NAME(Reg_obj::inv,"inv");
	HX_MARK_MEMBER_NAME(Reg_obj::itemsList,"itemsList");
	HX_MARK_MEMBER_NAME(Reg_obj::helper,"helper");
	HX_MARK_MEMBER_NAME(Reg_obj::charactersTempData,"charactersTempData");
	HX_MARK_MEMBER_NAME(Reg_obj::triggers,"triggers");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Reg_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Reg_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Reg_obj::debugger,"debugger");
	HX_VISIT_MEMBER_NAME(Reg_obj::current,"current");
	HX_VISIT_MEMBER_NAME(Reg_obj::levels,"levels");
	HX_VISIT_MEMBER_NAME(Reg_obj::level,"level");
	HX_VISIT_MEMBER_NAME(Reg_obj::charactersMap,"charactersMap");
	HX_VISIT_MEMBER_NAME(Reg_obj::scores,"scores");
	HX_VISIT_MEMBER_NAME(Reg_obj::score,"score");
	HX_VISIT_MEMBER_NAME(Reg_obj::saves,"saves");
	HX_VISIT_MEMBER_NAME(Reg_obj::server,"server");
	HX_VISIT_MEMBER_NAME(Reg_obj::request,"request");
	HX_VISIT_MEMBER_NAME(Reg_obj::name,"name");
	HX_VISIT_MEMBER_NAME(Reg_obj::image,"image");
	HX_VISIT_MEMBER_NAME(Reg_obj::gui,"gui");
	HX_VISIT_MEMBER_NAME(Reg_obj::inv,"inv");
	HX_VISIT_MEMBER_NAME(Reg_obj::itemsList,"itemsList");
	HX_VISIT_MEMBER_NAME(Reg_obj::helper,"helper");
	HX_VISIT_MEMBER_NAME(Reg_obj::charactersTempData,"charactersTempData");
	HX_VISIT_MEMBER_NAME(Reg_obj::triggers,"triggers");
};

#endif

hx::Class Reg_obj::__mClass;

static ::String Reg_obj_sStaticFields[] = {
	HX_HCSTRING("debugger","\x21","\x24","\xeb","\x90"),
	HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb"),
	HX_HCSTRING("levels","\x6f","\xbe","\x4f","\xa4"),
	HX_HCSTRING("level","\x84","\x15","\x63","\x72"),
	HX_HCSTRING("charactersMap","\x12","\xb0","\x51","\x5a"),
	HX_HCSTRING("scores","\xe1","\x74","\x6b","\x45"),
	HX_HCSTRING("score","\x52","\x73","\xd9","\x78"),
	HX_HCSTRING("saves","\x96","\x4a","\x8c","\x77"),
	HX_HCSTRING("server","\xc3","\x4a","\x37","\x6e"),
	HX_HCSTRING("request","\x4f","\xdf","\x84","\x44"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"),
	HX_HCSTRING("gui","\x7b","\x8e","\x4e","\x00"),
	HX_HCSTRING("inv","\xf1","\x0c","\x50","\x00"),
	HX_HCSTRING("itemsList","\x7e","\xf4","\x5e","\xd6"),
	HX_HCSTRING("helper","\x6e","\x7d","\x4e","\x04"),
	HX_HCSTRING("charactersTempData","\x28","\x2e","\xbf","\x4f"),
	HX_HCSTRING("triggers","\x3b","\x3c","\x8b","\xfd"),
	::String(null())
};

void Reg_obj::__register()
{
	hx::Object *dummy = new Reg_obj;
	Reg_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Reg","\x34","\x91","\x3e","\x00");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Reg_obj::__GetStatic;
	__mClass->mSetStaticField = &Reg_obj::__SetStatic;
	__mClass->mMarkFunc = Reg_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Reg_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Reg_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Reg_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Reg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Reg_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Reg_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_8_boot)
HXDLIN(   8)		debugger = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_10_boot)
HXDLIN(  10)		current = HX_("",00,00,00,00);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_11_boot)
HXDLIN(  11)		levels =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_12_boot)
HXDLIN(  12)		level = null();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_13_boot)
HXDLIN(  13)		charactersMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_15_boot)
HXDLIN(  15)		scores = ::cpp::VirtualArray_obj::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_16_boot)
HXDLIN(  16)		score = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_17_boot)
HXDLIN(  17)		saves = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_19_boot)
HXDLIN(  19)		server = HX_("https://nodejs-api-fomalssj.c9users.io",ef,02,de,c4);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_20_boot)
HXDLIN(  20)		request =  ::Request_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_21_boot)
HXDLIN(  21)		name = HX_("__NAME__",4b,61,2b,78);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_22_boot)
HXDLIN(  22)		image = HX_("images/char.png",88,ce,bf,62);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_24_boot)
HXDLIN(  24)		gui =  ::GUI_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_26_boot)
HXDLIN(  26)		inv =  ::Inventory_obj::__alloc( HX_CTX ,null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_27_boot)
HXDLIN(  27)		itemsList =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_28_boot)
HXDLIN(  28)		helper =  ::Helper_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_30_boot)
HXDLIN(  30)		charactersTempData =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_32_boot)
HXDLIN(  32)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  32)			_g->set(HX_("is_dialog",bd,6b,57,56),false);
HXDLIN(  32)			_g->set(HX_("is_inventory",c7,16,c7,7f),false);
HXDLIN(  32)			_g->set(HX_("select",fc,1a,33,6a), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),(int)0)
            				->setFixed(1,HX_("y",79,00,00,00),(int)0)));
HXDLIN(  32)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_a9cfc6b082c0c8ed_32_boot)
HXDLIN(  32)		triggers =  ::Dynamic(new _hx_Closure_0())();
            	}
}

