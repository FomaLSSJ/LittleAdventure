// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_Player
#define INCLUDED_Player

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(Character)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)



class HXCPP_CLASS_ATTRIBUTES Player_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Player_obj OBJ_;
		Player_obj();

	public:
		enum { _hx_ClassId = 0x6c4d5f81 };

		void __construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Player")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Player"); }
		static hx::ObjectPtr< Player_obj > __new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic);
		static hx::ObjectPtr< Player_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Player_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c"); }

		static void __boot();
		static int TILE_SIZE;
		static int MOVEMENT_SPEED;
		static int ANIMATION_SPEED;
		bool moveToNextTile;
		bool moveToDoor;
		 ::Character executeCharacter;
		void update(Float elapsed);

		void use();
		::Dynamic use_dyn();

		void inventory();
		::Dynamic inventory_dyn();

		void movement();
		::Dynamic movement_dyn();

		void moveTo(int direction);
		::Dynamic moveTo_dyn();

		void collideCharacters( ::Player p, ::Character c);
		::Dynamic collideCharacters_dyn();

		void checkCharacters();
		::Dynamic checkCharacters_dyn();

		 ::flixel::math::FlxPoint checkNextTile();
		::Dynamic checkNextTile_dyn();

		int getDirection();
		::Dynamic getDirection_dyn();

};


#endif /* INCLUDED_Player */ 
