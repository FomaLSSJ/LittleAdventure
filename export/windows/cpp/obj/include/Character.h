// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_Character
#define INCLUDED_Character

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(Character)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)



class HXCPP_CLASS_ATTRIBUTES Character_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Character_obj OBJ_;
		Character_obj();

	public:
		enum { _hx_ClassId = 0x00bb8ea5 };

		void __construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Character")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Character"); }
		static hx::ObjectPtr< Character_obj > __new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic);
		static hx::ObjectPtr< Character_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Character_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Character","\x89","\xbb","\xa4","\xe3"); }

		static void __boot();
		static int TILE_SIZE;
		static int MOVEMENT_SPEED;
		static int ANIMATION_SPEED;
		::String id;
		::String name;
		int dialogIndex;
		::Array< ::Dynamic> dialog;
		void update(Float elapsed);

		void execute( ::Dynamic executor);
		::Dynamic execute_dyn();

		void setLook(int Direction);
		::Dynamic setLook_dyn();

		int getDirection();
		::Dynamic getDirection_dyn();

		void startDialog();
		::Dynamic startDialog_dyn();

};


#endif /* INCLUDED_Character */ 
