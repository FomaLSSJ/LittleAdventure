// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_ImageLoad
#define INCLUDED_ImageLoad

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(ImageLoad)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS3(openfl,_legacy,display,BitmapData)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,DisplayObjectContainer)
HX_DECLARE_CLASS3(openfl,_legacy,display,IBitmapDrawable)
HX_DECLARE_CLASS3(openfl,_legacy,display,InteractiveObject)
HX_DECLARE_CLASS3(openfl,_legacy,display,Loader)
HX_DECLARE_CLASS3(openfl,_legacy,display,Sprite)
HX_DECLARE_CLASS3(openfl,_legacy,events,EventDispatcher)
HX_DECLARE_CLASS3(openfl,_legacy,events,IEventDispatcher)



class HXCPP_CLASS_ATTRIBUTES ImageLoad_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef ImageLoad_obj OBJ_;
		ImageLoad_obj();

	public:
		enum { _hx_ClassId = 0x05ecb539 };

		void __construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic, ::Dynamic callback);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ImageLoad")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"ImageLoad"); }
		static hx::ObjectPtr< ImageLoad_obj > __new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic, ::Dynamic callback);
		static hx::ObjectPtr< ImageLoad_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic, ::Dynamic callback);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ImageLoad_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ImageLoad","\x01","\x0f","\xbf","\xcb"); }

		 ::openfl::_legacy::display::Loader loader;
		 ::openfl::_legacy::display::BitmapData bitmapData;
};


#endif /* INCLUDED_ImageLoad */ 
